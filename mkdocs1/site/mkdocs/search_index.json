{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nnanocosmos documentation - visit \nnanocosmos.de\n.\n\n\nDocs\n\n\n\n\nweb api\n - Create a new project.\n\n\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\nFor full documentation visit \nmkdocs.org\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "nanocosmos documentation - visit  nanocosmos.de .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#docs", 
            "text": "web api  - Create a new project.", 
            "title": "Docs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.  For full documentation visit  mkdocs.org .", 
            "title": "Project layout"
        }, 
        {
            "location": "/about/", 
            "text": "About nanocosmos", 
            "title": "About"
        }, 
        {
            "location": "/nanostream-4.x-web-api/", 
            "text": "nanoStream Live Video Encoder\n\n\nWebcaster / Browser based Live Encoder\nVersion 4.0\nCompatible to NPAPI, ActiveX and Chrome Extension\n(c) 2015 nanocosmos gmbh\nhttp://www.nanocosmos.net\n\n\nWork in Progress\n\n\nNANO.NanoStream\n\n\n\n\n\n\nDescription\n\n\n\n\nUse the \nNANO.NanoStream\n API to communicate with the plugin. It provide async functions and events to handle devices, configs, preview and broadcast. Use the functions with callbacks to retrieve necessary informations and data for the encoder lifecycle and the usage with frontend javascript code.\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\nChrome, Firefox, Internet Explorer, Safari\n\n\n\n\n\n\n\n\nOS\n\n\n\n\nWindows Support for NPAPI / Chrome\n\n\nMacOS Support only for NPAPI (Chrome not supported yet)\n\n\n\n\n\n\n\n\nAvailability\n\n\n\n\nSince nanoStream 4.0\n\n\n\n\n\n\n\n\nNanoStream Summary\n\n\n\n\n\n\nAPI Methods (async with callbacks)\n\n\n\n\nGetAudioDeviceConfig\n\n\nGetAudioDevices\n\n\nGetAudioLevels\n\n\nGetConfig\n\n\nGetInputs\n\n\nGetOutputs\n\n\nGetVideoDeviceConfig\n\n\nGetVideoDevices\n\n\nGetWindows\n\n\nSaveXmlProfile\n\n\nSetAudioVolume\n\n\nSetConfigs\n\n\nSetInputs\n\n\nSetOutputs\n\n\nSetPictureInPictureSize\n\n\nSetVideoMixingMode\n\n\nSetXmlProfile\n\n\nStartBroadcast\n\n\nStartPreview\n\n\nStopBroadcast\n\n\nStopPreview\n\n\nInit\n\n\n\n\n\n\n\n\nHelper Methods (sync)\n\n\n\n\nDetectBrowser\n\n\nInstallExtensionInline\n\n\nInstallExtensionWebstore\n\n\nFireEvent\n\n\n\n\n\n\n\n\nEvents\n\n\n\n\nonError\n\n\nonNotifyEvent\n\n\nonStopEvent\n\n\nonSupported\n\n\nonUnsupported\n\n\n\n\n\n\n\n\nAPI Methods (async with callbacks)\n\n\nGetAudioDeviceConfig\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetAudioDeviceConfig(\ninteger\n index, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nAn object with all possible config parameters of the the audio device by index will be passed in the success callback.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetAudioDeviceConfig(\ninteger\n index, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\ninteger\n index\n\n\nThe index of the audio device\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetAudioDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevice\n: {\n                            \nid\n: string, // the device name\n                            \nindex\n: integer, // the device index\n                            \noptions\n: [ // array with options\n                                {\n                                    \nsamplerates\n: [ // array available samplerates \n                                        integer,\n                                        integer,\n                                        ...\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetAudioDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevice\n: {\n                            \nid\n: \nMikrofon (HD Pro Webcam C920)\n,\n                            \nindex\n: 2,\n                            \noptions\n: [\n                                {\n                                    \nsamplerates\n: [\n                                        22050,\n                                        24000,\n                                        44100,\n                                        48000\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n:\nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetAudioDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetAudioDeviceConfig\n,\n                \nparams\n: [\n                    index\n                ]                \n            }\n\n\n\n\nExample\n\n\n    var index = 0;\n    var message = NANO.NanoStream.GetAudioDeviceConfig(\n        index,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            var device = message.data.value.device;\n            var options = message.data.value.device.options;\n            for (var i = 0; i \n options.length; i += 1) {\n                console.log(\nFound options \n + i + \n for audio device '\n + device.id + \n' with index = \n + device.index);\n                var samplerates = options[i].samplerates;\n                for (var j = 0; j \n samplerates.length; j += 1) {\n                    console.log(\nAvailable samplerate: \n + samplerates[j]);                \n                }\n            }\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nGetAudioDevices\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetAudioDevices(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nAn array object with all available audio devices will be passed in the success callback.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetAudioDevices(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetAudioDevices\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevices\n: {\n                            \naudio\n: [ // array with device objects\n                                {\n                                    \nid\n: string, // the device name\n                                    \nindex\n: integer // the device index\n                                },\n                                {\n                                    \nid\n: string,\n                                    \nindex\n: integer\n                                },\n                                {\n                                    \nid\n: string,\n                                    \nindex\n: integer\n                                },\n                                ...\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetAudioDevices\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevices\n: {\n                            \naudio\n: [\n                                {\n                                    \nid\n: \nMikrofon (HD Pro Webcam C920)\n,\n                                    \nindex\n: 0\n                                },\n                                {\n                                    \nid\n: \nnanocosmos Live Audio Capture\n,\n                                    \nindex\n: 1\n                                }\n                            ]                            \n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetAudioDevices\n,\n                \ndata\n: {\n                    \nvalue\n: string // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetAudioDevices\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.GetAudioDevices(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            var devices = message.data.value.devices.audio;\n            for (var i = 0; i \n devices.length; i += 1) {\n                console.log(\nFound audio device '\n + devices[i].id + \n' with index = \n + devices[i].index);\n            }\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nGetAudioLevels\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetAudioLevels(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nAn array object with the current audio levels (stereo) will be passed in the success callback.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetAudioLevels(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetAudioLevels\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nlevels\n: [\n                            integer,\n                            integer\n                        ]\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetAudioLevels\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nlevels\n: [\n                            14326,\n                            13954\n                        ]\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetAudioLevels\n,\n                \ndata\n: {\n                    \nvalue\n: string // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetAudioLevels\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    NANO.NanoStream.GetAudioLevels(function success(message) {\n        var levels = message.data.value.levels;\n        var reference = 32768.0;\n        var left = Math.round(levels[0] / reference * 100) / 100;\n        var right = Math.round(levels[1] / reference * 100) / 100;\n        console.log(\nAudio level left: \n + left);\n        console.log(\nAudio level right: \n + right);\n    }, null);\n\n\n\n\nup\n\n\n\n\nGetConfig\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetConfig(\nstring\n key, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method gets the value from a defined key of the advanced configuration.\n\n\nNOTE: see possible advanced configuration \nhere\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetConfig(\nstring\n key, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nstring\n key\n\n\nThe key of the key value pair\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nkey\n: string, // the key of the key value pair\n                        \nvalue\n: string // the value of the key value pair\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nkey\n: \nVideoMixerMode\n,\n                        \nvalue\n: \n0\n\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetConfig\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetConfig\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var key = \nVideoMixerMode\n;\n    var message = NANO.NanoStream.GetConfig(\n        key,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nConfig pair: \n + message.data.value.key + \n,\n + message.data.value.value);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nGetInputs\n\n\nGetOutputs\n\n\nGetVideoDeviceConfig\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetVideoDeviceConfig(\ninteger\n index, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nAn object with all possible config parameters of the the video device by index will be passed in the success callback.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetVideoDeviceConfig(\ninteger\n index, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\ninteger\n index\n\n\nThe index of the video device\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetVideoDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevice\n: {\n                            \nid\n: string, // the device name\n                            \nindex\n: integer, // the device index\n                            \noptions\n: [ // array with options\n                                { // the option object with an available resolution\n                                    \ncolorspaces\n: [ // array of colorspace objects related to the resolution (available colorspaces)\n                                        {\n                                            \nframerates\n: [ // array of framerates related to the specified available colorspace\n                                                float, // available framerate\n                                                float,\n                                                ...\n                                            ],\n                                            \nid\n: string, // the name of the colorspace\n                                            \nindex\n: integer // the index of the colorspace\n                                        },\n                                        ... // more available colorspaces\n                                    ],\n                                    \nresolution\n: { // the resolution object\n                                        \nheight\n: integer, // the height\n                                        \nwidth\n: integer // the width\n                                    }\n                                },\n                                { // the option object with an available resolution\n                                    \ncolorspaces\n: [ // array of colorspace objects related to the resolution (available colorspaces)\n                                        {\n                                            \nframerates\n: [ // array of framerates related to the specified available colorspace\n                                                float, // available framerate\n                                                float,\n                                                ...\n                                            ],\n                                            \nid\n: string, // the name of the colorspace\n                                            \nindex\n: integer // the index of the colorspace\n                                        },\n                                        ... // more available colorspaces\n                                    ],\n                                    \nresolution\n: { // the resolution object\n                                        \nheight\n: integer, // the height\n                                        \nwidth\n: integer // the width\n                                    }\n                                },\n                                ... // more objects\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetVideoDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevice\n: {\n                            \nid\n: \nLogitech HD Pro Webcam C920\n,\n                            \nindex\n: 1,\n                            \noptions\n: [\n                                {\n                                    \ncolorspaces\n: [\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nMJPG\n,\n                                            \nindex\n: 0\n                                        },\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nRGB24\n,\n                                            \nindex\n: 1\n                                        },\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nI420\n,\n                                            \nindex\n: 2\n                                        }\n                                    ],\n                                    \nresolution\n: {\n                                        \nheight\n: 360,\n                                        \nwidth\n: 640\n                                    }\n                                },\n                                {\n                                    \ncolorspaces\n: [\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nMJPG\n,\n                                            \nindex\n: 0 \n                                        },\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nRGB24\n,\n                                            \nindex\n: 1 \n                                        },\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nI420\n,\n                                            \nindex\n: 2 \n                                        }\n                                    ],\n                                    \nresolution\n: {\n                                        \nheight\n: 720,\n                                        \nwidth\n: 1280\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: \nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetVideoDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetVideoDeviceConfig\n,\n                \nparams\n: [\n                    index\n                ]                \n            }\n\n\n\n\nExample\n\n\n    var index = 0;\n    var message = NANO.NanoStream.GetVideoDeviceConfig(\n        index,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            var device = message.data.value.device;\n            var options = message.data.value.device.options;\n            for (var i = 0; i \n options.length; i += 1) {\n                console.log(\nFound options \n + i + \n for audio device '\n + device.id + \n' with index = \n + device.index);\n                var width = options[i].resolution.width;\n                var height = options[i].resolution.height;\n                console.log(\nAvailable resolution: \n + width + \nx\n + height);\n                var colorspaces = options[i].colorspaces;\n                for (var j = 0; j \n colorspaces.length; j += 1) {\n                    var name = colorspaces[j].id;\n                    var index = colorspaces[j].index;\n                    console.log(\nAvailable colorspace for resolution \n + width + \nx\n + height + \n: name = \n + name + \n, index = \n + index);\n                    for (var k = 0; k \n colorspaces[j].framerates.length; k += 1) {\n                        console.log(\nAvailable framerate for \n + width + \nx\n + height + \n, \n + name + \n: \n + colorspaces[j].framerates[k]);\n                    }\n                }\n            }\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nGetVideoDevices\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetVideoDevices(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nAn array object with all available video devices will be passed in the success callback.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetVideoDevices(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetVideoDevices\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevices\n: {\n                            \nvideo\n: [ // array with device objects\n                                {\n                                    \nid\n: string, // the device name\n                                    \nindex\n: integer // the device index\n                                },\n                                {\n                                    \nid\n: string,\n                                    \nindex\n: integer\n                                },\n                                {\n                                    \nid\n: string,\n                                    \nindex\n: integer\n                                },\n                                ...\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetVideoDevices\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevices\n: {\n                            \nvideo\n: [\n                                {\n                                    \nid\n: \nMikrofon (HD Pro Webcam C920)\n,\n                                    \nindex\n: 0\n                                },\n                                {\n                                    \nid\n: \nnanocosmos Live Video Capture\n,\n                                    \nindex\n: 1\n                                }\n                            ]                            \n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetVideoDevices\n,\n                \ndata\n: {\n                    \nvalue\n: string // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetVideoDevices\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.GetVideoDevices(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            var devices = message.data.value.devices.video;\n            for (var i = 0; i \n devices.length; i += 1) {\n                console.log(\nFound video device '\n + devices[i].id + \n' with index = \n + devices[i].index);\n            }\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nGetWindows\n\n\nSaveXmlProfile\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SaveXmlProfile(\nstring\n path, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method saves an 'XML' profile to a defined path.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.SaveXmlProfile(\nstring\n path, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SaveXmlProfile(\nstring\n path, \nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SaveXmlProfile(\nstring\n path, \nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nstring\n path\n\n\nThe path to save the profile to\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSaveXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSaveXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSaveXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSaveXmlProfile\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var path = \nC:\\profile.xml\n;\n    var message = NANO.NanoStream.SaveXmlProfile(\n        path,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nProfile saved\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nSetAudioVolume\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SetAudioVolume(\ninteger\n volume, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method sets the audio volume in a range between 0 and 100.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.SetAudioVolume(\ninteger\n volume, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetAudioVolume(\ninteger\n volume, \nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetAudioVolume(\ninteger\n volume, \nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\ninteger\n volume\n\n\nThe volume to set in a range between 0 and 100\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSetAudioVolume\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSetAudioVolume\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSetAudioVolume\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSetAudioVolume\n,\n                \nparams\n: [\n                    integer\n                ]                \n            }\n\n\n\n\nExample\n\n\n    var volume = 50;\n    var message = NANO.NanoStream.SetAudioVolume(\n        volume,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nVolume set\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nSetConfigs\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SetConfigs(\nobject\n \nnanoConfigObject\n, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\n\n\nThis method sets multiple key value pairs for advanced configuration.\n\n\n\n\n\n\nNOTE: see possible advanced configurations \nhere\n\n\n\n\n\n\nNOTE: it's necesary to use the \nNANO.Config\n class to generate the needed object \nnanoConfigObject\n\n\n\n\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetConfigs(\nobject\n \nnanoConfigObject\n, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nobject\n \nnanoConfigObject\n\n\nThe object with one or multiple key value pairs\n\n\nNOTE: see the description to the usage of this object \nhere\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSetConfigs\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSetConfigs\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n            \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSetConfigs\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSetConfigs\n,\n                \nparams\n: [ object ]                \n            }\n\n\n\n\nExamples\n\n\n\n\nlow latency configuration\n\n\n\n\n    var config = new NANO.Config();\n    config.AddConfig(\nH264Profile\n, \nBaseline\n); // Baseline Profile supported by most devices and players\n    config.AddConfig(\nH264IFrameDistance\n, \n50\n); // Moderate GOP length\n    config.AddConfig(\nH264PFrameDistance\n, \n1\n); // No B-frames \n    //(optional)\n    //config.AddConfig(\nH264VlcMode\n, \n1\n); // CAVLC entropy coding mode\n    //config.AddConfig(\nRateControl\n, \n1\n); // Strict constant bitrate\n    var nanoConfigObject = config.GetConfig(); // returns the well json parsed object we need to pass\n    var message = NANO.NanoStream.SetConfigs(\n        nanoConfigObject,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nConfiguration set\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nSetInputs\n\n\nSetOutputs\n\n\nSetPictureInPictureSize\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SetPictureInPictureSize(\ninteger\n size, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method sets the picture in picture size in a range between 0 and 3.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.SetPictureInPictureSize(\ninteger\n size, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetPictureInPictureSize(\ninteger\n size, \nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetPictureInPictureSize(\ninteger\n size, \nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\ninteger\n size\n\n\nThe picture in picture size to set in a range between 0 and 3\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSetPictureInPictureSize\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSetPictureInPictureSize\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSetPictureInPictureSize\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSetPictureInPictureSize\n,\n                \nparams\n: [\n                    integer\n                ]                \n            }\n\n\n\n\nExample\n\n\n    var size = 2;\n    var message = NANO.NanoStream.SetPictureInPictureSize(\n        size,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nPicture in picture size set\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nSetVideoMixingMode\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SetVideoMixingMode(\ninteger\n mode, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method sets the video mix mode.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.SetVideoMixingMode(\ninteger\n mode, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetVideoMixingMode(\ninteger\n mode, \nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetVideoMixingMode(\ninteger\n mode, \nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\ninteger\n mode\n\n\nThe video mix mode to set\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSetVideoMixingMode\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSetVideoMixingMode\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSetVideoMixingMode\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSetVideoMixingMode\n,\n                \nparams\n: [\n                    integer\n                ]                \n            }\n\n\n\n\nExample\n\n\n    var mode = 0;\n    var message = NANO.NanoStream.SetVideoMixingMode(\n        mode,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nVideo mix mode set\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nSetXmlProfile\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SetXmlProfile(\nstring\n path, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method loads an 'XML' profile from a defined path.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.SetXmlProfile(\nstring\n path, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetXmlProfile(\nstring\n path, \nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetXmlProfile(\nstring\n path, \nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nstring\n path\n\n\nThe path to load the profile from\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSetXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSetXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSetXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSetXmlProfile\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var path = \nC:\\profile.xml\n;\n    var message = NANO.NanoStream.SetXmlProfile(\n        path,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nProfile loaded\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nStartBroadcast\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.StartBroadcast(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method will start the broadcast and/or recording.\n\n\nThe callback parameters are optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.StartBroadcast(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StartBroadcast(\nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StartBroadcast(\nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nStartBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nframerate\n: float\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nStartBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nframerate\n: 30\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nStartBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nStartBroadcast\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.StartBroadcast(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nBroadcast started with framerate \n + message.data.value.framerate);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nStartPreview\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.StartPreview(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method will start the preview.\n\n\nThe callback parameters are optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.StartPreview(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StartPreview(\nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StartPreview(\nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nStartPreview\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nframerate\n: float\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nStartPreview\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nframerate\n: 30\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nStartPreview\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nStartPreview\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.StartPreview(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nPreview started with framerate \n + message.data.value.framerate);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nStopBroadcast\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.StopBroadcast(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method will start the preview.\n\n\nThe callback parameters are optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.StopBroadcast(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StopBroadcast(\nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StopBroadcast(\nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nStopBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: string           \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nStopBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n            \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nStopBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nStopBroadcast\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.StopBroadcast(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nBroadcast stopped\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nStopPreview\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.StopPreview(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method will start the preview.\n\n\nThe callback parameters are optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.StopPreview(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StopPreview(\nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StopPreview(\nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nStopPreview\n,\n                \ndata\n: {\n                    \nvalue\n: string            \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nStopPreview\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nStopPreview\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nStopPreview\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.StopPreview(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nPreview stopped\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nInit\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.Init(\nstring\n elementId, \nstring\n license, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method embeds the plugin into an container element (div) and initilize the plugin.\n\n\nCall this method after \nNANO.NanoStream.DetectBrowser()\n and before any other API call.\n\n\n\n\nParameters\n\n\n\n\nstring\n elementId\n\n\nThe id of the div element where to embed the plugin into\n\n\n\n\n\n\nstring\n license\n\n\nThe license string\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nInit\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nInit\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nInit\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ncode\n: integer, // the error code\n                        \nerror\n: string // the error message\n                    }\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nInit\n,\n                \nparams\n: [\n                    string,\n                    string\n                ]\n            }\n\n\n\n\nExample (with all possible errors)\n\n\n    var elementId = \nvideo-container\n; // an existing div element with this id\n    var license = \nnlic::...\n; // an valid nanostream license string\n    var message = NANO.NanoStream.Init(\n        elementId,\n        license,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nNanoStream plugin successfully embedded and ready!\n);\n        },\n        function error(message) {\n            if (message.type === \nnanoextensioncheck\n) { // only chrome\n                if (message.data.value.code === 0) { // extension not installed or unavailable\n                    // DO STUFF\n                    var result = confirm(\nYou using chrome browser, but don't have installed your extension!\\r\\nDo you want to install it now?\n);\n                    if (result) {\n                        NANO.NanoStream.InstallExtensionInline();\n                    }\n                } else if (message.data.value.code === 1) { // extension installation finished (not really an error, but passed within the handler)\n                    // DO STUFF\n                    console.log(\nExtension now installed\n);\n                }\n            } else if (message.type === \nnanoversioncheck\n) { // only chrome\n                if (message.data.value.code === 0) { // native version outdated\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 1) { // extension version outdated\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 2) { // lib version outdated\n                    alert(message.data.value.error);\n                }\n            } else {\n                if (message.data.value.code === 100) { // error initialization\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 101) { // error setting license\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 102) { // error connecting to the native plugin (only chrome)\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 103) { // error connecting to the extension (only chrome)\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 104) { // error passing parameters / wrong parameters\n                    alert(message.data.value.error);\n                } else { // error embedding plugin\n                    if (message.data.value.code === 0) { // plugin found but no version\n                        alert(message.data.value.error);\n                    } else if (message.data.value.code === -1) { // general no plugins available (unsupported browser) \n                        alert(message.data.value.error);\n                    } else if (message.data.value.code === -2) { // plugin not found / not installed / not activated\n                        alert(message.data.value.error);\n                    } else {\n                        alert(\nUnknown Error Init: code = \n + message.data.value.code + \n, error = '\n + message.data.value.error + \n'\n);\n                    }\n                }\n            }\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nHelper Methods (sync)\n\n\nDetectBrowser\n\n\nFireEvent\n\n\nInstallExtensionInline\n\n\nInstallExtensionWebstore\n\n\nEvents\n\n\nonError\n\n\nonNotifyEvent\n\n\nonStopEvent\n\n\nonSupported\n\n\nonUnsupported\n\n\nNANO Config", 
            "title": "web api"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#nanostream-live-video-encoder", 
            "text": "Webcaster / Browser based Live Encoder\nVersion 4.0\nCompatible to NPAPI, ActiveX and Chrome Extension\n(c) 2015 nanocosmos gmbh\nhttp://www.nanocosmos.net  Work in Progress", 
            "title": "nanoStream Live Video Encoder"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#nanonanostream", 
            "text": "Description   Use the  NANO.NanoStream  API to communicate with the plugin. It provide async functions and events to handle devices, configs, preview and broadcast. Use the functions with callbacks to retrieve necessary informations and data for the encoder lifecycle and the usage with frontend javascript code.     Browser   Chrome, Firefox, Internet Explorer, Safari     OS   Windows Support for NPAPI / Chrome  MacOS Support only for NPAPI (Chrome not supported yet)     Availability   Since nanoStream 4.0", 
            "title": "NANO.NanoStream"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#nanostream-summary", 
            "text": "API Methods (async with callbacks)   GetAudioDeviceConfig  GetAudioDevices  GetAudioLevels  GetConfig  GetInputs  GetOutputs  GetVideoDeviceConfig  GetVideoDevices  GetWindows  SaveXmlProfile  SetAudioVolume  SetConfigs  SetInputs  SetOutputs  SetPictureInPictureSize  SetVideoMixingMode  SetXmlProfile  StartBroadcast  StartPreview  StopBroadcast  StopPreview  Init     Helper Methods (sync)   DetectBrowser  InstallExtensionInline  InstallExtensionWebstore  FireEvent     Events   onError  onNotifyEvent  onStopEvent  onSupported  onUnsupported", 
            "title": "NanoStream Summary"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#api-methods-async-with-callbacks", 
            "text": "GetAudioDeviceConfig  up to summary  object  NANO.NanoStream.GetAudioDeviceConfig( integer  index,  function  successCallback,  function  errorCallback)  Description   An object with all possible config parameters of the the audio device by index will be passed in the success callback.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetAudioDeviceConfig( integer  index,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   integer  index  The index of the audio device    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetAudioDeviceConfig ,\n                 data : {\n                     value : {\n                         device : {\n                             id : string, // the device name\n                             index : integer, // the device index\n                             options : [ // array with options\n                                {\n                                     samplerates : [ // array available samplerates \n                                        integer,\n                                        integer,\n                                        ...\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetAudioDeviceConfig ,\n                 data : {\n                     value : {\n                         device : {\n                             id :  Mikrofon (HD Pro Webcam C920) ,\n                             index : 2,\n                             options : [\n                                {\n                                     samplerates : [\n                                        22050,\n                                        24000,\n                                        44100,\n                                        48000\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status : COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetAudioDeviceConfig ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetAudioDeviceConfig ,\n                 params : [\n                    index\n                ]                \n            }  Example      var index = 0;\n    var message = NANO.NanoStream.GetAudioDeviceConfig(\n        index,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            var device = message.data.value.device;\n            var options = message.data.value.device.options;\n            for (var i = 0; i   options.length; i += 1) {\n                console.log( Found options   + i +   for audio device '  + device.id +  ' with index =   + device.index);\n                var samplerates = options[i].samplerates;\n                for (var j = 0; j   samplerates.length; j += 1) {\n                    console.log( Available samplerate:   + samplerates[j]);                \n                }\n            }\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   GetAudioDevices  up to summary  object  NANO.NanoStream.GetAudioDevices( function  successCallback,  function  errorCallback)  Description   An array object with all available audio devices will be passed in the success callback.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetAudioDevices( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetAudioDevices ,\n                 data : {\n                     value : {\n                         devices : {\n                             audio : [ // array with device objects\n                                {\n                                     id : string, // the device name\n                                     index : integer // the device index\n                                },\n                                {\n                                     id : string,\n                                     index : integer\n                                },\n                                {\n                                     id : string,\n                                     index : integer\n                                },\n                                ...\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetAudioDevices ,\n                 data : {\n                     value : {\n                         devices : {\n                             audio : [\n                                {\n                                     id :  Mikrofon (HD Pro Webcam C920) ,\n                                     index : 0\n                                },\n                                {\n                                     id :  nanocosmos Live Audio Capture ,\n                                     index : 1\n                                }\n                            ]                            \n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetAudioDevices ,\n                 data : {\n                     value : string // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetAudioDevices ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.GetAudioDevices(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            var devices = message.data.value.devices.audio;\n            for (var i = 0; i   devices.length; i += 1) {\n                console.log( Found audio device '  + devices[i].id +  ' with index =   + devices[i].index);\n            }\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   GetAudioLevels  up to summary  object  NANO.NanoStream.GetAudioLevels( function  successCallback,  function  errorCallback)  Description   An array object with the current audio levels (stereo) will be passed in the success callback.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetAudioLevels( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetAudioLevels ,\n                 data : {\n                     value : {\n                         levels : [\n                            integer,\n                            integer\n                        ]\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetAudioLevels ,\n                 data : {\n                     value : {\n                         levels : [\n                            14326,\n                            13954\n                        ]\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetAudioLevels ,\n                 data : {\n                     value : string // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetAudioLevels ,\n                 params : []                \n            }  Example      NANO.NanoStream.GetAudioLevels(function success(message) {\n        var levels = message.data.value.levels;\n        var reference = 32768.0;\n        var left = Math.round(levels[0] / reference * 100) / 100;\n        var right = Math.round(levels[1] / reference * 100) / 100;\n        console.log( Audio level left:   + left);\n        console.log( Audio level right:   + right);\n    }, null);  up   GetConfig  up to summary  object  NANO.NanoStream.GetConfig( string  key,  function  successCallback,  function  errorCallback)  Description   This method gets the value from a defined key of the advanced configuration.  NOTE: see possible advanced configuration  here  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetConfig( string  key,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   string  key  The key of the key value pair    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetConfig ,\n                 data : {\n                     value : {\n                         key : string, // the key of the key value pair\n                         value : string // the value of the key value pair\n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetConfig ,\n                 data : {\n                     value : {\n                         key :  VideoMixerMode ,\n                         value :  0 \n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetConfig ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetConfig ,\n                 params : []                \n            }  Example      var key =  VideoMixerMode ;\n    var message = NANO.NanoStream.GetConfig(\n        key,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Config pair:   + message.data.value.key +  ,  + message.data.value.value);\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   GetInputs  GetOutputs  GetVideoDeviceConfig  up to summary  object  NANO.NanoStream.GetVideoDeviceConfig( integer  index,  function  successCallback,  function  errorCallback)  Description   An object with all possible config parameters of the the video device by index will be passed in the success callback.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetVideoDeviceConfig( integer  index,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   integer  index  The index of the video device    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetVideoDeviceConfig ,\n                 data : {\n                     value : {\n                         device : {\n                             id : string, // the device name\n                             index : integer, // the device index\n                             options : [ // array with options\n                                { // the option object with an available resolution\n                                     colorspaces : [ // array of colorspace objects related to the resolution (available colorspaces)\n                                        {\n                                             framerates : [ // array of framerates related to the specified available colorspace\n                                                float, // available framerate\n                                                float,\n                                                ...\n                                            ],\n                                             id : string, // the name of the colorspace\n                                             index : integer // the index of the colorspace\n                                        },\n                                        ... // more available colorspaces\n                                    ],\n                                     resolution : { // the resolution object\n                                         height : integer, // the height\n                                         width : integer // the width\n                                    }\n                                },\n                                { // the option object with an available resolution\n                                     colorspaces : [ // array of colorspace objects related to the resolution (available colorspaces)\n                                        {\n                                             framerates : [ // array of framerates related to the specified available colorspace\n                                                float, // available framerate\n                                                float,\n                                                ...\n                                            ],\n                                             id : string, // the name of the colorspace\n                                             index : integer // the index of the colorspace\n                                        },\n                                        ... // more available colorspaces\n                                    ],\n                                     resolution : { // the resolution object\n                                         height : integer, // the height\n                                         width : integer // the width\n                                    }\n                                },\n                                ... // more objects\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetVideoDeviceConfig ,\n                 data : {\n                     value : {\n                         device : {\n                             id :  Logitech HD Pro Webcam C920 ,\n                             index : 1,\n                             options : [\n                                {\n                                     colorspaces : [\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  MJPG ,\n                                             index : 0\n                                        },\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  RGB24 ,\n                                             index : 1\n                                        },\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  I420 ,\n                                             index : 2\n                                        }\n                                    ],\n                                     resolution : {\n                                         height : 360,\n                                         width : 640\n                                    }\n                                },\n                                {\n                                     colorspaces : [\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  MJPG ,\n                                             index : 0 \n                                        },\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  RGB24 ,\n                                             index : 1 \n                                        },\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  I420 ,\n                                             index : 2 \n                                        }\n                                    ],\n                                     resolution : {\n                                         height : 720,\n                                         width : 1280\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type :  nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetVideoDeviceConfig ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetVideoDeviceConfig ,\n                 params : [\n                    index\n                ]                \n            }  Example      var index = 0;\n    var message = NANO.NanoStream.GetVideoDeviceConfig(\n        index,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            var device = message.data.value.device;\n            var options = message.data.value.device.options;\n            for (var i = 0; i   options.length; i += 1) {\n                console.log( Found options   + i +   for audio device '  + device.id +  ' with index =   + device.index);\n                var width = options[i].resolution.width;\n                var height = options[i].resolution.height;\n                console.log( Available resolution:   + width +  x  + height);\n                var colorspaces = options[i].colorspaces;\n                for (var j = 0; j   colorspaces.length; j += 1) {\n                    var name = colorspaces[j].id;\n                    var index = colorspaces[j].index;\n                    console.log( Available colorspace for resolution   + width +  x  + height +  : name =   + name +  , index =   + index);\n                    for (var k = 0; k   colorspaces[j].framerates.length; k += 1) {\n                        console.log( Available framerate for   + width +  x  + height +  ,   + name +  :   + colorspaces[j].framerates[k]);\n                    }\n                }\n            }\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   GetVideoDevices  up to summary  object  NANO.NanoStream.GetVideoDevices( function  successCallback,  function  errorCallback)  Description   An array object with all available video devices will be passed in the success callback.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetVideoDevices( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetVideoDevices ,\n                 data : {\n                     value : {\n                         devices : {\n                             video : [ // array with device objects\n                                {\n                                     id : string, // the device name\n                                     index : integer // the device index\n                                },\n                                {\n                                     id : string,\n                                     index : integer\n                                },\n                                {\n                                     id : string,\n                                     index : integer\n                                },\n                                ...\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetVideoDevices ,\n                 data : {\n                     value : {\n                         devices : {\n                             video : [\n                                {\n                                     id :  Mikrofon (HD Pro Webcam C920) ,\n                                     index : 0\n                                },\n                                {\n                                     id :  nanocosmos Live Video Capture ,\n                                     index : 1\n                                }\n                            ]                            \n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetVideoDevices ,\n                 data : {\n                     value : string // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetVideoDevices ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.GetVideoDevices(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            var devices = message.data.value.devices.video;\n            for (var i = 0; i   devices.length; i += 1) {\n                console.log( Found video device '  + devices[i].id +  ' with index =   + devices[i].index);\n            }\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   GetWindows  SaveXmlProfile  up to summary  object  NANO.NanoStream.SaveXmlProfile( string  path,  function  successCallback,  function  errorCallback)  Description   This method saves an 'XML' profile to a defined path.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.SaveXmlProfile( string  path,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.SaveXmlProfile( string  path,  null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.SaveXmlProfile( string  path,  null ,  null )  no callback       Parameters   string  path  The path to save the profile to    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SaveXmlProfile ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SaveXmlProfile ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SaveXmlProfile ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SaveXmlProfile ,\n                 params : []                \n            }  Example      var path =  C:\\profile.xml ;\n    var message = NANO.NanoStream.SaveXmlProfile(\n        path,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Profile saved );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   SetAudioVolume  up to summary  object  NANO.NanoStream.SetAudioVolume( integer  volume,  function  successCallback,  function  errorCallback)  Description   This method sets the audio volume in a range between 0 and 100.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.SetAudioVolume( integer  volume,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.SetAudioVolume( integer  volume,  null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.SetAudioVolume( integer  volume,  null ,  null )  no callback       Parameters   integer  volume  The volume to set in a range between 0 and 100    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SetAudioVolume ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SetAudioVolume ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SetAudioVolume ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SetAudioVolume ,\n                 params : [\n                    integer\n                ]                \n            }  Example      var volume = 50;\n    var message = NANO.NanoStream.SetAudioVolume(\n        volume,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Volume set );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   SetConfigs  up to summary  object  NANO.NanoStream.SetConfigs( object   nanoConfigObject ,  function  successCallback,  function  errorCallback)  Description    This method sets multiple key value pairs for advanced configuration.    NOTE: see possible advanced configurations  here    NOTE: it's necesary to use the  NANO.Config  class to generate the needed object  nanoConfigObject    The error callback parameters is optional. If no callback should be used, pass  null   e.g.  object  NANO.NanoStream.SetConfigs( object   nanoConfigObject ,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   object   nanoConfigObject  The object with one or multiple key value pairs  NOTE: see the description to the usage of this object  here    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SetConfigs ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SetConfigs ,\n                 data : {\n                     value :  noreturnvalue             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SetConfigs ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SetConfigs ,\n                 params : [ object ]                \n            }  Examples   low latency configuration       var config = new NANO.Config();\n    config.AddConfig( H264Profile ,  Baseline ); // Baseline Profile supported by most devices and players\n    config.AddConfig( H264IFrameDistance ,  50 ); // Moderate GOP length\n    config.AddConfig( H264PFrameDistance ,  1 ); // No B-frames \n    //(optional)\n    //config.AddConfig( H264VlcMode ,  1 ); // CAVLC entropy coding mode\n    //config.AddConfig( RateControl ,  1 ); // Strict constant bitrate\n    var nanoConfigObject = config.GetConfig(); // returns the well json parsed object we need to pass\n    var message = NANO.NanoStream.SetConfigs(\n        nanoConfigObject,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Configuration set );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   SetInputs  SetOutputs  SetPictureInPictureSize  up to summary  object  NANO.NanoStream.SetPictureInPictureSize( integer  size,  function  successCallback,  function  errorCallback)  Description   This method sets the picture in picture size in a range between 0 and 3.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.SetPictureInPictureSize( integer  size,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.SetPictureInPictureSize( integer  size,  null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.SetPictureInPictureSize( integer  size,  null ,  null )  no callback       Parameters   integer  size  The picture in picture size to set in a range between 0 and 3    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SetPictureInPictureSize ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SetPictureInPictureSize ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SetPictureInPictureSize ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SetPictureInPictureSize ,\n                 params : [\n                    integer\n                ]                \n            }  Example      var size = 2;\n    var message = NANO.NanoStream.SetPictureInPictureSize(\n        size,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Picture in picture size set );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   SetVideoMixingMode  up to summary  object  NANO.NanoStream.SetVideoMixingMode( integer  mode,  function  successCallback,  function  errorCallback)  Description   This method sets the video mix mode.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.SetVideoMixingMode( integer  mode,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.SetVideoMixingMode( integer  mode,  null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.SetVideoMixingMode( integer  mode,  null ,  null )  no callback       Parameters   integer  mode  The video mix mode to set    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SetVideoMixingMode ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SetVideoMixingMode ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SetVideoMixingMode ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SetVideoMixingMode ,\n                 params : [\n                    integer\n                ]                \n            }  Example      var mode = 0;\n    var message = NANO.NanoStream.SetVideoMixingMode(\n        mode,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Video mix mode set );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   SetXmlProfile  up to summary  object  NANO.NanoStream.SetXmlProfile( string  path,  function  successCallback,  function  errorCallback)  Description   This method loads an 'XML' profile from a defined path.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.SetXmlProfile( string  path,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.SetXmlProfile( string  path,  null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.SetXmlProfile( string  path,  null ,  null )  no callback       Parameters   string  path  The path to load the profile from    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SetXmlProfile ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SetXmlProfile ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SetXmlProfile ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SetXmlProfile ,\n                 params : []                \n            }  Example      var path =  C:\\profile.xml ;\n    var message = NANO.NanoStream.SetXmlProfile(\n        path,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Profile loaded );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   StartBroadcast  up to summary  object  NANO.NanoStream.StartBroadcast( function  successCallback,  function  errorCallback)  Description   This method will start the broadcast and/or recording.  The callback parameters are optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.StartBroadcast( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.StartBroadcast( null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.StartBroadcast( null ,  null )  no callback       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  StartBroadcast ,\n                 data : {\n                     value : {\n                         framerate : float\n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  StartBroadcast ,\n                 data : {\n                     value : {\n                         framerate : 30\n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  StartBroadcast ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  StartBroadcast ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.StartBroadcast(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Broadcast started with framerate   + message.data.value.framerate);\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   StartPreview  up to summary  object  NANO.NanoStream.StartPreview( function  successCallback,  function  errorCallback)  Description   This method will start the preview.  The callback parameters are optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.StartPreview( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.StartPreview( null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.StartPreview( null ,  null )  no callback       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  StartPreview ,\n                 data : {\n                     value : {\n                         framerate : float\n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  StartPreview ,\n                 data : {\n                     value : {\n                         framerate : 30\n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  StartPreview ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  StartPreview ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.StartPreview(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Preview started with framerate   + message.data.value.framerate);\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   StopBroadcast  up to summary  object  NANO.NanoStream.StopBroadcast( function  successCallback,  function  errorCallback)  Description   This method will start the preview.  The callback parameters are optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.StopBroadcast( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.StopBroadcast( null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.StopBroadcast( null ,  null )  no callback       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  StopBroadcast ,\n                 data : {\n                     value : string           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  StopBroadcast ,\n                 data : {\n                     value :  noreturnvalue             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  StopBroadcast ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  StopBroadcast ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.StopBroadcast(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Broadcast stopped );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   StopPreview  up to summary  object  NANO.NanoStream.StopPreview( function  successCallback,  function  errorCallback)  Description   This method will start the preview.  The callback parameters are optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.StopPreview( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.StopPreview( null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.StopPreview( null ,  null )  no callback       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  StopPreview ,\n                 data : {\n                     value : string            \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  StopPreview ,\n                 data : {\n                     value :  noreturnvalue \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  StopPreview ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  StopPreview ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.StopPreview(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Preview stopped );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   Init  up to summary  object  NANO.NanoStream.Init( string  elementId,  string  license,  function  successCallback,  function  errorCallback)  Description   This method embeds the plugin into an container element (div) and initilize the plugin.  Call this method after  NANO.NanoStream.DetectBrowser()  and before any other API call.   Parameters   string  elementId  The id of the div element where to embed the plugin into    string  license  The license string    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  Init ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  Init ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  Init ,\n                 data : {\n                     value : {\n                         code : integer, // the error code\n                         error : string // the error message\n                    }\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  Init ,\n                 params : [\n                    string,\n                    string\n                ]\n            }  Example (with all possible errors)      var elementId =  video-container ; // an existing div element with this id\n    var license =  nlic::... ; // an valid nanostream license string\n    var message = NANO.NanoStream.Init(\n        elementId,\n        license,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( NanoStream plugin successfully embedded and ready! );\n        },\n        function error(message) {\n            if (message.type ===  nanoextensioncheck ) { // only chrome\n                if (message.data.value.code === 0) { // extension not installed or unavailable\n                    // DO STUFF\n                    var result = confirm( You using chrome browser, but don't have installed your extension!\\r\\nDo you want to install it now? );\n                    if (result) {\n                        NANO.NanoStream.InstallExtensionInline();\n                    }\n                } else if (message.data.value.code === 1) { // extension installation finished (not really an error, but passed within the handler)\n                    // DO STUFF\n                    console.log( Extension now installed );\n                }\n            } else if (message.type ===  nanoversioncheck ) { // only chrome\n                if (message.data.value.code === 0) { // native version outdated\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 1) { // extension version outdated\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 2) { // lib version outdated\n                    alert(message.data.value.error);\n                }\n            } else {\n                if (message.data.value.code === 100) { // error initialization\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 101) { // error setting license\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 102) { // error connecting to the native plugin (only chrome)\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 103) { // error connecting to the extension (only chrome)\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 104) { // error passing parameters / wrong parameters\n                    alert(message.data.value.error);\n                } else { // error embedding plugin\n                    if (message.data.value.code === 0) { // plugin found but no version\n                        alert(message.data.value.error);\n                    } else if (message.data.value.code === -1) { // general no plugins available (unsupported browser) \n                        alert(message.data.value.error);\n                    } else if (message.data.value.code === -2) { // plugin not found / not installed / not activated\n                        alert(message.data.value.error);\n                    } else {\n                        alert( Unknown Error Init: code =   + message.data.value.code +  , error = '  + message.data.value.error +  ' );\n                    }\n                }\n            }\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up", 
            "title": "API Methods (async with callbacks)"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#helper-methods-sync", 
            "text": "DetectBrowser  FireEvent  InstallExtensionInline  InstallExtensionWebstore", 
            "title": "Helper Methods (sync)"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#events", 
            "text": "onError  onNotifyEvent  onStopEvent  onSupported  onUnsupported", 
            "title": "Events"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#nano-config", 
            "text": "", 
            "title": "NANO Config"
        }
    ]
}