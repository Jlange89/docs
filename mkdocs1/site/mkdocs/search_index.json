{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nnanocosmos documentation - visit \nnanocosmos.de\n.\n\n\nDocs\n\n\n\n\nweb api\n - Create a new project.\n\n\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\nFor full documentation visit \nmkdocs.org\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "nanocosmos documentation - visit  nanocosmos.de .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#docs", 
            "text": "web api  - Create a new project.", 
            "title": "Docs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.  For full documentation visit  mkdocs.org .", 
            "title": "Project layout"
        }, 
        {
            "location": "/about/", 
            "text": "About nanocosmos", 
            "title": "About"
        }, 
        {
            "location": "/nanostream-4.x-web-api/", 
            "text": "nanoStream Live Video Encoder\n\n\nWebcaster / Browser based Live Encoder\nVersion 4.0\nCompatible to NPAPI, ActiveX and Chrome Extension\n(c) 2015 nanocosmos gmbh\nhttp://www.nanocosmos.net\n\n\nWork in Progress\n\n\nNANO.NanoStream\n\n\n\n\n\n\nDescription\n\n\n\n\nUse the \nNANO.NanoStream\n API to communicate with the plugin. It provide async functions and events to handle devices, configs, preview and broadcast. Use the functions with callbacks to retrieve necessary informations and data for the encoder lifecycle and the usage with frontend javascript code.\n\n\n\n\n\n\n\n\nBrowser\n\n\n\n\nChrome, Firefox, Internet Explorer, Safari\n\n\n\n\n\n\n\n\nOS\n\n\n\n\nWindows Support for NPAPI / Chrome\n\n\nMacOS Support only for NPAPI (Chrome not supported yet)\n\n\n\n\n\n\n\n\nAvailability\n\n\n\n\nSince nanoStream 4.0\n\n\n\n\n\n\n\n\nNanoStream Summary\n\n\n\n\n\n\nAPI Methods (async with callbacks)\n\n\n\n\nGetAudioDeviceConfig\n\n\nGetAudioDevices\n\n\nGetAudioLevels\n\n\nGetConfig\n\n\nGetInputs\n\n\nGetOutputs\n\n\nGetVideoDeviceConfig\n\n\nGetVideoDevices\n\n\nGetWindows\n\n\nSaveXmlProfile\n\n\nSetAudioVolume\n\n\nSetConfigs\n\n\nSetInputs\n\n\nSetOutputs\n\n\nSetPictureInPictureSize\n\n\nSetVideoMixingMode\n\n\nSetXmlProfile\n\n\nStartBroadcast\n\n\nStartPreview\n\n\nStopBroadcast\n\n\nStopPreview\n\n\nInit\n\n\n\n\n\n\n\n\nHelper Methods (sync)\n\n\n\n\nDetectBrowser\n\n\nInstallExtensionInline\n\n\nInstallExtensionWebstore\n\n\nFireEvent\n\n\n\n\n\n\n\n\nEvents\n\n\n\n\nonError\n\n\nonNotifyEvent\n\n\nonStopEvent\n\n\nonSupported\n\n\nonUnsupported\n\n\n\n\n\n\n\n\nAPI Methods (async with callbacks)\n\n\nGetAudioDeviceConfig\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetAudioDeviceConfig(\ninteger\n index, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nAn object with all possible config parameters of the the audio device by index will be passed in the success callback.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetAudioDeviceConfig(\ninteger\n index, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\ninteger\n index\n\n\nThe index of the audio device\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetAudioDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevice\n: {\n                            \nid\n: string, // the device name\n                            \nindex\n: integer, // the device index\n                            \noptions\n: [ // array with options\n                                {\n                                    \nsamplerates\n: [ // array available samplerates \n                                        integer,\n                                        integer,\n                                        ...\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetAudioDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevice\n: {\n                            \nid\n: \nMikrofon (HD Pro Webcam C920)\n,\n                            \nindex\n: 2,\n                            \noptions\n: [\n                                {\n                                    \nsamplerates\n: [\n                                        22050,\n                                        24000,\n                                        44100,\n                                        48000\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n:\nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetAudioDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetAudioDeviceConfig\n,\n                \nparams\n: [\n                    index\n                ]                \n            }\n\n\n\n\nExample\n\n\n    var index = 0;\n    var message = NANO.NanoStream.GetAudioDeviceConfig(\n        index,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            var device = message.data.value.device;\n            var options = message.data.value.device.options;\n            for (var i = 0; i \n options.length; i += 1) {\n                console.log(\nFound options \n + i + \n for audio device '\n + device.id + \n' with index = \n + device.index);\n                var samplerates = options[i].samplerates;\n                for (var j = 0; j \n samplerates.length; j += 1) {\n                    console.log(\nAvailable samplerate: \n + samplerates[j]);                \n                }\n            }\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nGetAudioDevices\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetAudioDevices(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nAn array object with all available audio devices will be passed in the success callback.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetAudioDevices(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetAudioDevices\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevices\n: {\n                            \naudio\n: [ // array with device objects\n                                {\n                                    \nid\n: string, // the device name\n                                    \nindex\n: integer // the device index\n                                },\n                                {\n                                    \nid\n: string,\n                                    \nindex\n: integer\n                                },\n                                {\n                                    \nid\n: string,\n                                    \nindex\n: integer\n                                },\n                                ...\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetAudioDevices\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevices\n: {\n                            \naudio\n: [\n                                {\n                                    \nid\n: \nMikrofon (HD Pro Webcam C920)\n,\n                                    \nindex\n: 0\n                                },\n                                {\n                                    \nid\n: \nnanocosmos Live Audio Capture\n,\n                                    \nindex\n: 1\n                                }\n                            ]                            \n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetAudioDevices\n,\n                \ndata\n: {\n                    \nvalue\n: string // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetAudioDevices\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.GetAudioDevices(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            var devices = message.data.value.devices.audio;\n            for (var i = 0; i \n devices.length; i += 1) {\n                console.log(\nFound audio device '\n + devices[i].id + \n' with index = \n + devices[i].index);\n            }\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nGetAudioLevels\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetAudioLevels(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nAn array object with the current audio levels (stereo) will be passed in the success callback.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetAudioLevels(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetAudioLevels\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nlevels\n: [\n                            integer,\n                            integer\n                        ]\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetAudioLevels\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nlevels\n: [\n                            14326,\n                            13954\n                        ]\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetAudioLevels\n,\n                \ndata\n: {\n                    \nvalue\n: string // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetAudioLevels\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    NANO.NanoStream.GetAudioLevels(function success(message) {\n        var levels = message.data.value.levels;\n        var reference = 32768.0;\n        var left = Math.round(levels[0] / reference * 100) / 100;\n        var right = Math.round(levels[1] / reference * 100) / 100;\n        console.log(\nAudio level left: \n + left);\n        console.log(\nAudio level right: \n + right);\n    }, null);\n\n\n\n\nup\n\n\n\n\nGetConfig\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetConfig(\nstring\n key, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method gets the value from a defined key of the advanced configuration.\n\n\nNOTE: see possible advanced configuration \nhere\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetConfig(\nstring\n key, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nstring\n key\n\n\nThe key of the key value pair\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nkey\n: string, // the key of the key value pair\n                        \nvalue\n: string // the value of the key value pair\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nkey\n: \nVideoMixerMode\n,\n                        \nvalue\n: \n0\n\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetConfig\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetConfig\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var key = \nVideoMixerMode\n;\n    var message = NANO.NanoStream.GetConfig(\n        key,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nConfig pair: \n + message.data.value.key + \n,\n + message.data.value.value);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nGetInputs\n\n\nGetOutputs\n\n\nGetVideoDeviceConfig\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetVideoDeviceConfig(\ninteger\n index, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nAn object with all possible config parameters of the the video device by index will be passed in the success callback.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetVideoDeviceConfig(\ninteger\n index, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\ninteger\n index\n\n\nThe index of the video device\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetVideoDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevice\n: {\n                            \nid\n: string, // the device name\n                            \nindex\n: integer, // the device index\n                            \noptions\n: [ // array with options\n                                { // the option object with an available resolution\n                                    \ncolorspaces\n: [ // array of colorspace objects related to the resolution (available colorspaces)\n                                        {\n                                            \nframerates\n: [ // array of framerates related to the specified available colorspace\n                                                float, // available framerate\n                                                float,\n                                                ...\n                                            ],\n                                            \nid\n: string, // the name of the colorspace\n                                            \nindex\n: integer // the index of the colorspace\n                                        },\n                                        ... // more available colorspaces\n                                    ],\n                                    \nresolution\n: { // the resolution object\n                                        \nheight\n: integer, // the height\n                                        \nwidth\n: integer // the width\n                                    }\n                                },\n                                { // the option object with an available resolution\n                                    \ncolorspaces\n: [ // array of colorspace objects related to the resolution (available colorspaces)\n                                        {\n                                            \nframerates\n: [ // array of framerates related to the specified available colorspace\n                                                float, // available framerate\n                                                float,\n                                                ...\n                                            ],\n                                            \nid\n: string, // the name of the colorspace\n                                            \nindex\n: integer // the index of the colorspace\n                                        },\n                                        ... // more available colorspaces\n                                    ],\n                                    \nresolution\n: { // the resolution object\n                                        \nheight\n: integer, // the height\n                                        \nwidth\n: integer // the width\n                                    }\n                                },\n                                ... // more objects\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetVideoDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevice\n: {\n                            \nid\n: \nLogitech HD Pro Webcam C920\n,\n                            \nindex\n: 1,\n                            \noptions\n: [\n                                {\n                                    \ncolorspaces\n: [\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nMJPG\n,\n                                            \nindex\n: 0\n                                        },\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nRGB24\n,\n                                            \nindex\n: 1\n                                        },\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nI420\n,\n                                            \nindex\n: 2\n                                        }\n                                    ],\n                                    \nresolution\n: {\n                                        \nheight\n: 360,\n                                        \nwidth\n: 640\n                                    }\n                                },\n                                {\n                                    \ncolorspaces\n: [\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nMJPG\n,\n                                            \nindex\n: 0 \n                                        },\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nRGB24\n,\n                                            \nindex\n: 1 \n                                        },\n                                        {\n                                            \nframerates\n: [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                            \nid\n: \nI420\n,\n                                            \nindex\n: 2 \n                                        }\n                                    ],\n                                    \nresolution\n: {\n                                        \nheight\n: 720,\n                                        \nwidth\n: 1280\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: \nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetVideoDeviceConfig\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetVideoDeviceConfig\n,\n                \nparams\n: [\n                    index\n                ]                \n            }\n\n\n\n\nExample\n\n\n    var index = 0;\n    var message = NANO.NanoStream.GetVideoDeviceConfig(\n        index,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            var device = message.data.value.device;\n            var options = message.data.value.device.options;\n            for (var i = 0; i \n options.length; i += 1) {\n                console.log(\nFound options \n + i + \n for audio device '\n + device.id + \n' with index = \n + device.index);\n                var width = options[i].resolution.width;\n                var height = options[i].resolution.height;\n                console.log(\nAvailable resolution: \n + width + \nx\n + height);\n                var colorspaces = options[i].colorspaces;\n                for (var j = 0; j \n colorspaces.length; j += 1) {\n                    var name = colorspaces[j].id;\n                    var index = colorspaces[j].index;\n                    console.log(\nAvailable colorspace for resolution \n + width + \nx\n + height + \n: name = \n + name + \n, index = \n + index);\n                    for (var k = 0; k \n colorspaces[j].framerates.length; k += 1) {\n                        console.log(\nAvailable framerate for \n + width + \nx\n + height + \n, \n + name + \n: \n + colorspaces[j].framerates[k]);\n                    }\n                }\n            }\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nGetVideoDevices\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.GetVideoDevices(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nAn array object with all available video devices will be passed in the success callback.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.GetVideoDevices(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nGetVideoDevices\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevices\n: {\n                            \nvideo\n: [ // array with device objects\n                                {\n                                    \nid\n: string, // the device name\n                                    \nindex\n: integer // the device index\n                                },\n                                {\n                                    \nid\n: string,\n                                    \nindex\n: integer\n                                },\n                                {\n                                    \nid\n: string,\n                                    \nindex\n: integer\n                                },\n                                ...\n                            ]\n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nGetVideoDevices\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ndevices\n: {\n                            \nvideo\n: [\n                                {\n                                    \nid\n: \nMikrofon (HD Pro Webcam C920)\n,\n                                    \nindex\n: 0\n                                },\n                                {\n                                    \nid\n: \nnanocosmos Live Video Capture\n,\n                                    \nindex\n: 1\n                                }\n                            ]                            \n                        }\n                    }\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nGetVideoDevices\n,\n                \ndata\n: {\n                    \nvalue\n: string // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nGetVideoDevices\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.GetVideoDevices(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            var devices = message.data.value.devices.video;\n            for (var i = 0; i \n devices.length; i += 1) {\n                console.log(\nFound video device '\n + devices[i].id + \n' with index = \n + devices[i].index);\n            }\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nGetWindows\n\n\nSaveXmlProfile\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SaveXmlProfile(\nstring\n path, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method saves an 'XML' profile to a defined path.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.SaveXmlProfile(\nstring\n path, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SaveXmlProfile(\nstring\n path, \nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SaveXmlProfile(\nstring\n path, \nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nstring\n path\n\n\nThe path to save the profile to\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSaveXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSaveXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSaveXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSaveXmlProfile\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var path = \nC:\\profile.xml\n;\n    var message = NANO.NanoStream.SaveXmlProfile(\n        path,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nProfile saved\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nSetAudioVolume\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SetAudioVolume(\ninteger\n volume, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method sets the audio volume in a range between 0 and 100.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.SetAudioVolume(\ninteger\n volume, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetAudioVolume(\ninteger\n volume, \nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetAudioVolume(\ninteger\n volume, \nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\ninteger\n volume\n\n\nThe volume to set in a range between 0 and 100\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSetAudioVolume\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSetAudioVolume\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSetAudioVolume\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSetAudioVolume\n,\n                \nparams\n: [\n                    integer\n                ]                \n            }\n\n\n\n\nExample\n\n\n    var volume = 50;\n    var message = NANO.NanoStream.SetAudioVolume(\n        volume,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nVolume set\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nSetConfigs\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SetConfigs(\nobject\n \nnanoConfigObject\n, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\n\n\nThis method sets multiple key value pairs for advanced configuration.\n\n\n\n\n\n\nNOTE: see possible advanced configurations \nhere\n\n\n\n\n\n\nNOTE: it's necesary to use the \nNANO.Config\n class to generate the needed object \nnanoConfigObject\n\n\n\n\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetConfigs(\nobject\n \nnanoConfigObject\n, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nobject\n \nnanoConfigObject\n\n\nThe object with one or multiple key value pairs\n\n\nNOTE: see the description to the usage of this object \nhere\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSetConfigs\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSetConfigs\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n            \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSetConfigs\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSetConfigs\n,\n                \nparams\n: [ object ]                \n            }\n\n\n\n\nExamples\n\n\n\n\nlow latency configuration\n\n\n\n\n    var config = new NANO.Config();\n    config.AddConfig(\nH264Profile\n, \nBaseline\n); // Baseline Profile supported by most devices and players\n    config.AddConfig(\nH264IFrameDistance\n, \n50\n); // Moderate GOP length\n    config.AddConfig(\nH264PFrameDistance\n, \n1\n); // No B-frames \n    //(optional)\n    //config.AddConfig(\nH264VlcMode\n, \n1\n); // CAVLC entropy coding mode\n    //config.AddConfig(\nRateControl\n, \n1\n); // Strict constant bitrate\n    var nanoConfigObject = config.GetConfig(); // returns the well json parsed object we need to pass\n    var message = NANO.NanoStream.SetConfigs(\n        nanoConfigObject,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nConfiguration set\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nSetInputs\n\n\nSetOutputs\n\n\nSetPictureInPictureSize\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SetPictureInPictureSize(\ninteger\n size, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method sets the picture in picture size in a range between 0 and 3.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.SetPictureInPictureSize(\ninteger\n size, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetPictureInPictureSize(\ninteger\n size, \nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetPictureInPictureSize(\ninteger\n size, \nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\ninteger\n size\n\n\nThe picture in picture size to set in a range between 0 and 3\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSetPictureInPictureSize\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSetPictureInPictureSize\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSetPictureInPictureSize\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSetPictureInPictureSize\n,\n                \nparams\n: [\n                    integer\n                ]                \n            }\n\n\n\n\nExample\n\n\n    var size = 2;\n    var message = NANO.NanoStream.SetPictureInPictureSize(\n        size,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nPicture in picture size set\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nSetVideoMixingMode\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SetVideoMixingMode(\ninteger\n mode, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method sets the video mix mode.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.SetVideoMixingMode(\ninteger\n mode, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetVideoMixingMode(\ninteger\n mode, \nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetVideoMixingMode(\ninteger\n mode, \nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\ninteger\n mode\n\n\nThe video mix mode to set\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSetVideoMixingMode\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSetVideoMixingMode\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSetVideoMixingMode\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSetVideoMixingMode\n,\n                \nparams\n: [\n                    integer\n                ]                \n            }\n\n\n\n\nExample\n\n\n    var mode = 0;\n    var message = NANO.NanoStream.SetVideoMixingMode(\n        mode,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nVideo mix mode set\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nSetXmlProfile\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.SetXmlProfile(\nstring\n path, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method loads an 'XML' profile from a defined path.\n\n\nThe error callback parameters is optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.SetXmlProfile(\nstring\n path, \nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetXmlProfile(\nstring\n path, \nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.SetXmlProfile(\nstring\n path, \nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nstring\n path\n\n\nThe path to load the profile from\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nSetXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nSetXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nSetXmlProfile\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nSetXmlProfile\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var path = \nC:\\profile.xml\n;\n    var message = NANO.NanoStream.SetXmlProfile(\n        path,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nProfile loaded\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nStartBroadcast\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.StartBroadcast(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method will start the broadcast and/or recording.\n\n\nThe callback parameters are optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.StartBroadcast(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StartBroadcast(\nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StartBroadcast(\nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nStartBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nframerate\n: float\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nStartBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nframerate\n: 30\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nStartBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nStartBroadcast\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.StartBroadcast(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nBroadcast started with framerate \n + message.data.value.framerate);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nStartPreview\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.StartPreview(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method will start the preview.\n\n\nThe callback parameters are optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.StartPreview(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StartPreview(\nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StartPreview(\nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nStartPreview\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nframerate\n: float\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nStartPreview\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \nframerate\n: 30\n                    }                    \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nStartPreview\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nStartPreview\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.StartPreview(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nPreview started with framerate \n + message.data.value.framerate);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nStopBroadcast\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.StopBroadcast(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method will start the preview.\n\n\nThe callback parameters are optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.StopBroadcast(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StopBroadcast(\nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StopBroadcast(\nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nStopBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: string           \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nStopBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n            \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nStopBroadcast\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nStopBroadcast\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.StopBroadcast(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nBroadcast stopped\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nStopPreview\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.StopPreview(\nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method will start the preview.\n\n\nThe callback parameters are optional. If no callback should be used, pass \nnull\n\n\ne.g. \nobject\n NANO.NanoStream.StopPreview(\nfunction\n successCallback, \nnull\n)\n\n\nonly with success callback\n\n\nthe \nNANO.NanoStream.onError\n event will be used if defined\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StopPreview(\nnull\n, \nfunction\n errorCallback)\n\n\nonly with error callback\n\n\n\n\n\n\ne.g. \nobject\n NANO.NanoStream.StopPreview(\nnull\n, \nnull\n)\n\n\nno callback\n\n\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nStopPreview\n,\n                \ndata\n: {\n                    \nvalue\n: string            \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nStopPreview\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n\n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nStopPreview\n,\n                \ndata\n: {\n                    \nvalue\n: string  // the error message\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nStopPreview\n,\n                \nparams\n: []                \n            }\n\n\n\n\nExample\n\n\n    var message = NANO.NanoStream.StopPreview(\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nPreview stopped\n);\n        },\n        function error(message) {\n            alert(\nCallback Error: \n + JSON.stringify(message));\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nInit\n\n\nup to summary\n\n\nobject\n NANO.NanoStream.Init(\nstring\n elementId, \nstring\n license, \nfunction\n successCallback, \nfunction\n errorCallback)\n\n\nDescription\n\n\n\n\nThis method embeds the plugin into an container element (div) and initilize the plugin.\n\n\nCall this method after \nNANO.NanoStream.DetectBrowser()\n and before any other API call.\n\n\n\n\nParameters\n\n\n\n\nstring\n elementId\n\n\nThe id of the div element where to embed the plugin into\n\n\n\n\n\n\nstring\n license\n\n\nThe license string\n\n\n\n\n\n\nfunction\n successCallback(message)\n\n\nThe success callback method if defined\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n        general:\n            {\n                \ncommand\n: \nInit\n,\n                \ndata\n: {\n                    \nvalue\n: string             \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string // defines the sender\n            }\n        example:\n            {\n                \ncommand\n: \nInit\n,\n                \ndata\n: {\n                    \nvalue\n: \nnoreturnvalue\n          \n                },\n                \nresult\n: \nOK\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n:\nnanonative\n\n            }\n\n\n\n\n\n\nfunction\n errorCallback(message)\n\n\nobject\n message\n\n\nThe parsed message that will be send back to the client\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                \ncommand\n: \nInit\n,\n                \ndata\n: {\n                    \nvalue\n: {\n                        \ncode\n: integer, // the error code\n                        \nerror\n: string // the error message\n                    }\n                },\n                \nresult\n: \nFAILED\n,\n                \nstatus\n: \nCOMPLETE\n,\n                \ntype\n: string\n            }\n\n\n\n\nReturns\n\n\n\n\nThe parsed message that will be send to the plugin\n\n\nobject\n\n\n\n\n\n\n\n\n            {\n                \ntype\n: \nnanoclient\n,\n                \ncommand\n: \nInit\n,\n                \nparams\n: [\n                    string,\n                    string\n                ]\n            }\n\n\n\n\nExample (with all possible errors)\n\n\n    var elementId = \nvideo-container\n; // an existing div element with this id\n    var license = \nnlic::...\n; // an valid nanostream license string\n    var message = NANO.NanoStream.Init(\n        elementId,\n        license,\n        function success(message) {\n            console.log(\nCallback: \n + JSON.stringify(message));\n            console.log(\nNanoStream plugin successfully embedded and ready!\n);\n        },\n        function error(message) {\n            if (message.type === \nnanoextensioncheck\n) { // only chrome\n                if (message.data.value.code === 0) { // extension not installed or unavailable\n                    // DO STUFF\n                    var result = confirm(\nYou using chrome browser, but don't have installed your extension!\\r\\nDo you want to install it now?\n);\n                    if (result) {\n                        NANO.NanoStream.InstallExtensionInline();\n                    }\n                } else if (message.data.value.code === 1) { // extension installation finished (not really an error, but passed within the handler)\n                    // DO STUFF\n                    console.log(\nExtension now installed\n);\n                }\n            } else if (message.type === \nnanoversioncheck\n) { // only chrome\n                if (message.data.value.code === 0) { // native version outdated\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 1) { // extension version outdated\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 2) { // lib version outdated\n                    alert(message.data.value.error);\n                }\n            } else {\n                if (message.data.value.code === 100) { // error initialization\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 101) { // error setting license\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 102) { // error connecting to the native plugin (only chrome)\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 103) { // error connecting to the extension (only chrome)\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 104) { // error passing parameters / wrong parameters\n                    alert(message.data.value.error);\n                } else { // error embedding plugin\n                    if (message.data.value.code === 0) { // plugin found but no version\n                        alert(message.data.value.error);\n                    } else if (message.data.value.code === -1) { // general no plugins available (unsupported browser) \n                        alert(message.data.value.error);\n                    } else if (message.data.value.code === -2) { // plugin not found / not installed / not activated\n                        alert(message.data.value.error);\n                    } else {\n                        alert(\nUnknown Error Init: code = \n + message.data.value.code + \n, error = '\n + message.data.value.error + \n'\n);\n                    }\n                }\n            }\n        }\n    );\n    console.log(\nCall: \n + JSON.stringify(message));\n\n\n\n\nup\n\n\n\n\nHelper Methods (sync)\n\n\nDetectBrowser\n\n\nFireEvent\n\n\nInstallExtensionInline\n\n\nInstallExtensionWebstore\n\n\nEvents\n\n\nonError\n\n\nonNotifyEvent\n\n\nonStopEvent\n\n\nonSupported\n\n\nonUnsupported\n\n\nNANO Config", 
            "title": "web api"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#nanostream-live-video-encoder", 
            "text": "Webcaster / Browser based Live Encoder\nVersion 4.0\nCompatible to NPAPI, ActiveX and Chrome Extension\n(c) 2015 nanocosmos gmbh\nhttp://www.nanocosmos.net  Work in Progress", 
            "title": "nanoStream Live Video Encoder"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#nanonanostream", 
            "text": "Description   Use the  NANO.NanoStream  API to communicate with the plugin. It provide async functions and events to handle devices, configs, preview and broadcast. Use the functions with callbacks to retrieve necessary informations and data for the encoder lifecycle and the usage with frontend javascript code.     Browser   Chrome, Firefox, Internet Explorer, Safari     OS   Windows Support for NPAPI / Chrome  MacOS Support only for NPAPI (Chrome not supported yet)     Availability   Since nanoStream 4.0", 
            "title": "NANO.NanoStream"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#nanostream-summary", 
            "text": "API Methods (async with callbacks)   GetAudioDeviceConfig  GetAudioDevices  GetAudioLevels  GetConfig  GetInputs  GetOutputs  GetVideoDeviceConfig  GetVideoDevices  GetWindows  SaveXmlProfile  SetAudioVolume  SetConfigs  SetInputs  SetOutputs  SetPictureInPictureSize  SetVideoMixingMode  SetXmlProfile  StartBroadcast  StartPreview  StopBroadcast  StopPreview  Init     Helper Methods (sync)   DetectBrowser  InstallExtensionInline  InstallExtensionWebstore  FireEvent     Events   onError  onNotifyEvent  onStopEvent  onSupported  onUnsupported", 
            "title": "NanoStream Summary"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#api-methods-async-with-callbacks", 
            "text": "GetAudioDeviceConfig  up to summary  object  NANO.NanoStream.GetAudioDeviceConfig( integer  index,  function  successCallback,  function  errorCallback)  Description   An object with all possible config parameters of the the audio device by index will be passed in the success callback.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetAudioDeviceConfig( integer  index,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   integer  index  The index of the audio device    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetAudioDeviceConfig ,\n                 data : {\n                     value : {\n                         device : {\n                             id : string, // the device name\n                             index : integer, // the device index\n                             options : [ // array with options\n                                {\n                                     samplerates : [ // array available samplerates \n                                        integer,\n                                        integer,\n                                        ...\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetAudioDeviceConfig ,\n                 data : {\n                     value : {\n                         device : {\n                             id :  Mikrofon (HD Pro Webcam C920) ,\n                             index : 2,\n                             options : [\n                                {\n                                     samplerates : [\n                                        22050,\n                                        24000,\n                                        44100,\n                                        48000\n                                    ]\n                                }\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status : COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetAudioDeviceConfig ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetAudioDeviceConfig ,\n                 params : [\n                    index\n                ]                \n            }  Example      var index = 0;\n    var message = NANO.NanoStream.GetAudioDeviceConfig(\n        index,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            var device = message.data.value.device;\n            var options = message.data.value.device.options;\n            for (var i = 0; i   options.length; i += 1) {\n                console.log( Found options   + i +   for audio device '  + device.id +  ' with index =   + device.index);\n                var samplerates = options[i].samplerates;\n                for (var j = 0; j   samplerates.length; j += 1) {\n                    console.log( Available samplerate:   + samplerates[j]);                \n                }\n            }\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   GetAudioDevices  up to summary  object  NANO.NanoStream.GetAudioDevices( function  successCallback,  function  errorCallback)  Description   An array object with all available audio devices will be passed in the success callback.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetAudioDevices( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetAudioDevices ,\n                 data : {\n                     value : {\n                         devices : {\n                             audio : [ // array with device objects\n                                {\n                                     id : string, // the device name\n                                     index : integer // the device index\n                                },\n                                {\n                                     id : string,\n                                     index : integer\n                                },\n                                {\n                                     id : string,\n                                     index : integer\n                                },\n                                ...\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetAudioDevices ,\n                 data : {\n                     value : {\n                         devices : {\n                             audio : [\n                                {\n                                     id :  Mikrofon (HD Pro Webcam C920) ,\n                                     index : 0\n                                },\n                                {\n                                     id :  nanocosmos Live Audio Capture ,\n                                     index : 1\n                                }\n                            ]                            \n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetAudioDevices ,\n                 data : {\n                     value : string // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetAudioDevices ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.GetAudioDevices(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            var devices = message.data.value.devices.audio;\n            for (var i = 0; i   devices.length; i += 1) {\n                console.log( Found audio device '  + devices[i].id +  ' with index =   + devices[i].index);\n            }\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   GetAudioLevels  up to summary  object  NANO.NanoStream.GetAudioLevels( function  successCallback,  function  errorCallback)  Description   An array object with the current audio levels (stereo) will be passed in the success callback.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetAudioLevels( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetAudioLevels ,\n                 data : {\n                     value : {\n                         levels : [\n                            integer,\n                            integer\n                        ]\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetAudioLevels ,\n                 data : {\n                     value : {\n                         levels : [\n                            14326,\n                            13954\n                        ]\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetAudioLevels ,\n                 data : {\n                     value : string // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetAudioLevels ,\n                 params : []                \n            }  Example      NANO.NanoStream.GetAudioLevels(function success(message) {\n        var levels = message.data.value.levels;\n        var reference = 32768.0;\n        var left = Math.round(levels[0] / reference * 100) / 100;\n        var right = Math.round(levels[1] / reference * 100) / 100;\n        console.log( Audio level left:   + left);\n        console.log( Audio level right:   + right);\n    }, null);  up   GetConfig  up to summary  object  NANO.NanoStream.GetConfig( string  key,  function  successCallback,  function  errorCallback)  Description   This method gets the value from a defined key of the advanced configuration.  NOTE: see possible advanced configuration  here  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetConfig( string  key,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   string  key  The key of the key value pair    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetConfig ,\n                 data : {\n                     value : {\n                         key : string, // the key of the key value pair\n                         value : string // the value of the key value pair\n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetConfig ,\n                 data : {\n                     value : {\n                         key :  VideoMixerMode ,\n                         value :  0 \n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetConfig ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetConfig ,\n                 params : []                \n            }  Example      var key =  VideoMixerMode ;\n    var message = NANO.NanoStream.GetConfig(\n        key,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Config pair:   + message.data.value.key +  ,  + message.data.value.value);\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   GetInputs  GetOutputs  GetVideoDeviceConfig  up to summary  object  NANO.NanoStream.GetVideoDeviceConfig( integer  index,  function  successCallback,  function  errorCallback)  Description   An object with all possible config parameters of the the video device by index will be passed in the success callback.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetVideoDeviceConfig( integer  index,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   integer  index  The index of the video device    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetVideoDeviceConfig ,\n                 data : {\n                     value : {\n                         device : {\n                             id : string, // the device name\n                             index : integer, // the device index\n                             options : [ // array with options\n                                { // the option object with an available resolution\n                                     colorspaces : [ // array of colorspace objects related to the resolution (available colorspaces)\n                                        {\n                                             framerates : [ // array of framerates related to the specified available colorspace\n                                                float, // available framerate\n                                                float,\n                                                ...\n                                            ],\n                                             id : string, // the name of the colorspace\n                                             index : integer // the index of the colorspace\n                                        },\n                                        ... // more available colorspaces\n                                    ],\n                                     resolution : { // the resolution object\n                                         height : integer, // the height\n                                         width : integer // the width\n                                    }\n                                },\n                                { // the option object with an available resolution\n                                     colorspaces : [ // array of colorspace objects related to the resolution (available colorspaces)\n                                        {\n                                             framerates : [ // array of framerates related to the specified available colorspace\n                                                float, // available framerate\n                                                float,\n                                                ...\n                                            ],\n                                             id : string, // the name of the colorspace\n                                             index : integer // the index of the colorspace\n                                        },\n                                        ... // more available colorspaces\n                                    ],\n                                     resolution : { // the resolution object\n                                         height : integer, // the height\n                                         width : integer // the width\n                                    }\n                                },\n                                ... // more objects\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetVideoDeviceConfig ,\n                 data : {\n                     value : {\n                         device : {\n                             id :  Logitech HD Pro Webcam C920 ,\n                             index : 1,\n                             options : [\n                                {\n                                     colorspaces : [\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  MJPG ,\n                                             index : 0\n                                        },\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  RGB24 ,\n                                             index : 1\n                                        },\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  I420 ,\n                                             index : 2\n                                        }\n                                    ],\n                                     resolution : {\n                                         height : 360,\n                                         width : 640\n                                    }\n                                },\n                                {\n                                     colorspaces : [\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  MJPG ,\n                                             index : 0 \n                                        },\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  RGB24 ,\n                                             index : 1 \n                                        },\n                                        {\n                                             framerates : [ 5, 7.5, 10, 15, 20, 24, 30 ],\n                                             id :  I420 ,\n                                             index : 2 \n                                        }\n                                    ],\n                                     resolution : {\n                                         height : 720,\n                                         width : 1280\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type :  nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetVideoDeviceConfig ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetVideoDeviceConfig ,\n                 params : [\n                    index\n                ]                \n            }  Example      var index = 0;\n    var message = NANO.NanoStream.GetVideoDeviceConfig(\n        index,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            var device = message.data.value.device;\n            var options = message.data.value.device.options;\n            for (var i = 0; i   options.length; i += 1) {\n                console.log( Found options   + i +   for audio device '  + device.id +  ' with index =   + device.index);\n                var width = options[i].resolution.width;\n                var height = options[i].resolution.height;\n                console.log( Available resolution:   + width +  x  + height);\n                var colorspaces = options[i].colorspaces;\n                for (var j = 0; j   colorspaces.length; j += 1) {\n                    var name = colorspaces[j].id;\n                    var index = colorspaces[j].index;\n                    console.log( Available colorspace for resolution   + width +  x  + height +  : name =   + name +  , index =   + index);\n                    for (var k = 0; k   colorspaces[j].framerates.length; k += 1) {\n                        console.log( Available framerate for   + width +  x  + height +  ,   + name +  :   + colorspaces[j].framerates[k]);\n                    }\n                }\n            }\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   GetVideoDevices  up to summary  object  NANO.NanoStream.GetVideoDevices( function  successCallback,  function  errorCallback)  Description   An array object with all available video devices will be passed in the success callback.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.GetVideoDevices( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  GetVideoDevices ,\n                 data : {\n                     value : {\n                         devices : {\n                             video : [ // array with device objects\n                                {\n                                     id : string, // the device name\n                                     index : integer // the device index\n                                },\n                                {\n                                     id : string,\n                                     index : integer\n                                },\n                                {\n                                     id : string,\n                                     index : integer\n                                },\n                                ...\n                            ]\n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  GetVideoDevices ,\n                 data : {\n                     value : {\n                         devices : {\n                             video : [\n                                {\n                                     id :  Mikrofon (HD Pro Webcam C920) ,\n                                     index : 0\n                                },\n                                {\n                                     id :  nanocosmos Live Video Capture ,\n                                     index : 1\n                                }\n                            ]                            \n                        }\n                    }\n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  GetVideoDevices ,\n                 data : {\n                     value : string // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  GetVideoDevices ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.GetVideoDevices(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            var devices = message.data.value.devices.video;\n            for (var i = 0; i   devices.length; i += 1) {\n                console.log( Found video device '  + devices[i].id +  ' with index =   + devices[i].index);\n            }\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   GetWindows  SaveXmlProfile  up to summary  object  NANO.NanoStream.SaveXmlProfile( string  path,  function  successCallback,  function  errorCallback)  Description   This method saves an 'XML' profile to a defined path.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.SaveXmlProfile( string  path,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.SaveXmlProfile( string  path,  null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.SaveXmlProfile( string  path,  null ,  null )  no callback       Parameters   string  path  The path to save the profile to    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SaveXmlProfile ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SaveXmlProfile ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SaveXmlProfile ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SaveXmlProfile ,\n                 params : []                \n            }  Example      var path =  C:\\profile.xml ;\n    var message = NANO.NanoStream.SaveXmlProfile(\n        path,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Profile saved );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   SetAudioVolume  up to summary  object  NANO.NanoStream.SetAudioVolume( integer  volume,  function  successCallback,  function  errorCallback)  Description   This method sets the audio volume in a range between 0 and 100.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.SetAudioVolume( integer  volume,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.SetAudioVolume( integer  volume,  null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.SetAudioVolume( integer  volume,  null ,  null )  no callback       Parameters   integer  volume  The volume to set in a range between 0 and 100    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SetAudioVolume ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SetAudioVolume ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SetAudioVolume ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SetAudioVolume ,\n                 params : [\n                    integer\n                ]                \n            }  Example      var volume = 50;\n    var message = NANO.NanoStream.SetAudioVolume(\n        volume,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Volume set );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   SetConfigs  up to summary  object  NANO.NanoStream.SetConfigs( object   nanoConfigObject ,  function  successCallback,  function  errorCallback)  Description    This method sets multiple key value pairs for advanced configuration.    NOTE: see possible advanced configurations  here    NOTE: it's necesary to use the  NANO.Config  class to generate the needed object  nanoConfigObject    The error callback parameters is optional. If no callback should be used, pass  null   e.g.  object  NANO.NanoStream.SetConfigs( object   nanoConfigObject ,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined       Parameters   object   nanoConfigObject  The object with one or multiple key value pairs  NOTE: see the description to the usage of this object  here    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SetConfigs ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SetConfigs ,\n                 data : {\n                     value :  noreturnvalue             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SetConfigs ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SetConfigs ,\n                 params : [ object ]                \n            }  Examples   low latency configuration       var config = new NANO.Config();\n    config.AddConfig( H264Profile ,  Baseline ); // Baseline Profile supported by most devices and players\n    config.AddConfig( H264IFrameDistance ,  50 ); // Moderate GOP length\n    config.AddConfig( H264PFrameDistance ,  1 ); // No B-frames \n    //(optional)\n    //config.AddConfig( H264VlcMode ,  1 ); // CAVLC entropy coding mode\n    //config.AddConfig( RateControl ,  1 ); // Strict constant bitrate\n    var nanoConfigObject = config.GetConfig(); // returns the well json parsed object we need to pass\n    var message = NANO.NanoStream.SetConfigs(\n        nanoConfigObject,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Configuration set );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   SetInputs  SetOutputs  SetPictureInPictureSize  up to summary  object  NANO.NanoStream.SetPictureInPictureSize( integer  size,  function  successCallback,  function  errorCallback)  Description   This method sets the picture in picture size in a range between 0 and 3.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.SetPictureInPictureSize( integer  size,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.SetPictureInPictureSize( integer  size,  null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.SetPictureInPictureSize( integer  size,  null ,  null )  no callback       Parameters   integer  size  The picture in picture size to set in a range between 0 and 3    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SetPictureInPictureSize ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SetPictureInPictureSize ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SetPictureInPictureSize ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SetPictureInPictureSize ,\n                 params : [\n                    integer\n                ]                \n            }  Example      var size = 2;\n    var message = NANO.NanoStream.SetPictureInPictureSize(\n        size,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Picture in picture size set );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   SetVideoMixingMode  up to summary  object  NANO.NanoStream.SetVideoMixingMode( integer  mode,  function  successCallback,  function  errorCallback)  Description   This method sets the video mix mode.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.SetVideoMixingMode( integer  mode,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.SetVideoMixingMode( integer  mode,  null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.SetVideoMixingMode( integer  mode,  null ,  null )  no callback       Parameters   integer  mode  The video mix mode to set    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SetVideoMixingMode ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SetVideoMixingMode ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SetVideoMixingMode ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SetVideoMixingMode ,\n                 params : [\n                    integer\n                ]                \n            }  Example      var mode = 0;\n    var message = NANO.NanoStream.SetVideoMixingMode(\n        mode,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Video mix mode set );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   SetXmlProfile  up to summary  object  NANO.NanoStream.SetXmlProfile( string  path,  function  successCallback,  function  errorCallback)  Description   This method loads an 'XML' profile from a defined path.  The error callback parameters is optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.SetXmlProfile( string  path,  function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.SetXmlProfile( string  path,  null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.SetXmlProfile( string  path,  null ,  null )  no callback       Parameters   string  path  The path to load the profile from    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  SetXmlProfile ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  SetXmlProfile ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  SetXmlProfile ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  SetXmlProfile ,\n                 params : []                \n            }  Example      var path =  C:\\profile.xml ;\n    var message = NANO.NanoStream.SetXmlProfile(\n        path,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Profile loaded );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   StartBroadcast  up to summary  object  NANO.NanoStream.StartBroadcast( function  successCallback,  function  errorCallback)  Description   This method will start the broadcast and/or recording.  The callback parameters are optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.StartBroadcast( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.StartBroadcast( null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.StartBroadcast( null ,  null )  no callback       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  StartBroadcast ,\n                 data : {\n                     value : {\n                         framerate : float\n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  StartBroadcast ,\n                 data : {\n                     value : {\n                         framerate : 30\n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  StartBroadcast ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  StartBroadcast ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.StartBroadcast(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Broadcast started with framerate   + message.data.value.framerate);\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   StartPreview  up to summary  object  NANO.NanoStream.StartPreview( function  successCallback,  function  errorCallback)  Description   This method will start the preview.  The callback parameters are optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.StartPreview( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.StartPreview( null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.StartPreview( null ,  null )  no callback       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  StartPreview ,\n                 data : {\n                     value : {\n                         framerate : float\n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  StartPreview ,\n                 data : {\n                     value : {\n                         framerate : 30\n                    }                    \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  StartPreview ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  StartPreview ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.StartPreview(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Preview started with framerate   + message.data.value.framerate);\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   StopBroadcast  up to summary  object  NANO.NanoStream.StopBroadcast( function  successCallback,  function  errorCallback)  Description   This method will start the preview.  The callback parameters are optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.StopBroadcast( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.StopBroadcast( null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.StopBroadcast( null ,  null )  no callback       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  StopBroadcast ,\n                 data : {\n                     value : string           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  StopBroadcast ,\n                 data : {\n                     value :  noreturnvalue             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  StopBroadcast ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  StopBroadcast ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.StopBroadcast(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Broadcast stopped );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   StopPreview  up to summary  object  NANO.NanoStream.StopPreview( function  successCallback,  function  errorCallback)  Description   This method will start the preview.  The callback parameters are optional. If no callback should be used, pass  null  e.g.  object  NANO.NanoStream.StopPreview( function  successCallback,  null )  only with success callback  the  NANO.NanoStream.onError  event will be used if defined    e.g.  object  NANO.NanoStream.StopPreview( null ,  function  errorCallback)  only with error callback    e.g.  object  NANO.NanoStream.StopPreview( null ,  null )  no callback       Parameters   function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  StopPreview ,\n                 data : {\n                     value : string            \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  StopPreview ,\n                 data : {\n                     value :  noreturnvalue \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  StopPreview ,\n                 data : {\n                     value : string  // the error message\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  StopPreview ,\n                 params : []                \n            }  Example      var message = NANO.NanoStream.StopPreview(\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( Preview stopped );\n        },\n        function error(message) {\n            alert( Callback Error:   + JSON.stringify(message));\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up   Init  up to summary  object  NANO.NanoStream.Init( string  elementId,  string  license,  function  successCallback,  function  errorCallback)  Description   This method embeds the plugin into an container element (div) and initilize the plugin.  Call this method after  NANO.NanoStream.DetectBrowser()  and before any other API call.   Parameters   string  elementId  The id of the div element where to embed the plugin into    string  license  The license string    function  successCallback(message)  The success callback method if defined  object  message  The parsed message that will be send back to the client               general:\n            {\n                 command :  Init ,\n                 data : {\n                     value : string             \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : string // defines the sender\n            }\n        example:\n            {\n                 command :  Init ,\n                 data : {\n                     value :  noreturnvalue           \n                },\n                 result :  OK ,\n                 status :  COMPLETE ,\n                 type : nanonative \n            }   function  errorCallback(message)  object  message  The parsed message that will be send back to the client                   {\n                 command :  Init ,\n                 data : {\n                     value : {\n                         code : integer, // the error code\n                         error : string // the error message\n                    }\n                },\n                 result :  FAILED ,\n                 status :  COMPLETE ,\n                 type : string\n            }  Returns   The parsed message that will be send to the plugin  object                 {\n                 type :  nanoclient ,\n                 command :  Init ,\n                 params : [\n                    string,\n                    string\n                ]\n            }  Example (with all possible errors)      var elementId =  video-container ; // an existing div element with this id\n    var license =  nlic::... ; // an valid nanostream license string\n    var message = NANO.NanoStream.Init(\n        elementId,\n        license,\n        function success(message) {\n            console.log( Callback:   + JSON.stringify(message));\n            console.log( NanoStream plugin successfully embedded and ready! );\n        },\n        function error(message) {\n            if (message.type ===  nanoextensioncheck ) { // only chrome\n                if (message.data.value.code === 0) { // extension not installed or unavailable\n                    // DO STUFF\n                    var result = confirm( You using chrome browser, but don't have installed your extension!\\r\\nDo you want to install it now? );\n                    if (result) {\n                        NANO.NanoStream.InstallExtensionInline();\n                    }\n                } else if (message.data.value.code === 1) { // extension installation finished (not really an error, but passed within the handler)\n                    // DO STUFF\n                    console.log( Extension now installed );\n                }\n            } else if (message.type ===  nanoversioncheck ) { // only chrome\n                if (message.data.value.code === 0) { // native version outdated\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 1) { // extension version outdated\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 2) { // lib version outdated\n                    alert(message.data.value.error);\n                }\n            } else {\n                if (message.data.value.code === 100) { // error initialization\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 101) { // error setting license\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 102) { // error connecting to the native plugin (only chrome)\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 103) { // error connecting to the extension (only chrome)\n                    alert(message.data.value.error);\n                } else if (message.data.value.code === 104) { // error passing parameters / wrong parameters\n                    alert(message.data.value.error);\n                } else { // error embedding plugin\n                    if (message.data.value.code === 0) { // plugin found but no version\n                        alert(message.data.value.error);\n                    } else if (message.data.value.code === -1) { // general no plugins available (unsupported browser) \n                        alert(message.data.value.error);\n                    } else if (message.data.value.code === -2) { // plugin not found / not installed / not activated\n                        alert(message.data.value.error);\n                    } else {\n                        alert( Unknown Error Init: code =   + message.data.value.code +  , error = '  + message.data.value.error +  ' );\n                    }\n                }\n            }\n        }\n    );\n    console.log( Call:   + JSON.stringify(message));  up", 
            "title": "API Methods (async with callbacks)"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#helper-methods-sync", 
            "text": "DetectBrowser  FireEvent  InstallExtensionInline  InstallExtensionWebstore", 
            "title": "Helper Methods (sync)"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#events", 
            "text": "onError  onNotifyEvent  onStopEvent  onSupported  onUnsupported", 
            "title": "Events"
        }, 
        {
            "location": "/nanostream-4.x-web-api/#nano-config", 
            "text": "", 
            "title": "NANO Config"
        }, 
        {
            "location": "/nanostream-ios-sdk/", 
            "text": "This is Markdown.\nvergleiche\nhttp://www.nanocosmos.de/v4/documentation/nanostream_sdk_for_ios_-_developer_documentation\n\n\nnanoStream SDK for iOS - Developer Manual\n\n\nPurpose\n\n\nThis documentation is about the nanoStream Live Video Streaming SDK for iOS and can be used by software developers to integrate nanoStream Live Video Encoding into custom apps.\n\n\nRequirements\n\n\n\n\n\n\nApple Mac with MacOS 10.9 with XCode 6\n\n\n\n\n\n\nApple iPhone with iOS 7 or later (min. iOS 8.1 recommended)\n\n\n\n\n\n\nGetting Started\n\n\nPreparation\n\n\nAdd the library \"libnanostreamAVC.a\" as dependency (Link Binary With Libraries) to your project.\nFurther required dependencies:\n\n\n\n\n\n\nlibc++.dylib\n\n\n\n\n\n\nlibstdc++.dylib\n\n\n\n\n\n\nAVFoundation.framework\n\n\n\n\n\n\nAccelerate.framework\n\n\n\n\n\n\nCoreGraphics.framework\n\n\n\n\n\n\nCoreMedia.framework\n\n\n\n\n\n\nCoreVideo.framework\n\n\n\n\n\n\nFoundation.framework\n\n\n\n\n\n\nSystemConfiguration.framework\n\n\n\n\n\n\nVideoToolbox.framework (link as Optional, not as Required)\n\n\n\n\n\n\nAudioToolbox.framework\n\n\n\n\n\n\nInclude the header \"libnanostreamAVC.h\" in your source code.\n\n\nCheck library version\n\n\n    int version = [nanostreamAVC getVersion];\n    if(version!=NANOSTREAM_AVC_VERSION)\n    {\n      // Handle header and library version mismatch\n    }\n\n\n\n\n\nInitialize the library\n\n\nImplement the interface \"nanostreamEventListener\" in your class:\n\n\n    @interface SampleLiveViewController : UIViewController `\nnanostreamEventListener\n`\n    ...\n    @property (nonatomic, strong) nanostreamAVC *nAVC;\n    @property (nonatomic, strong) IBOutlet UIView *previewView;\n    ...\n    @end\n\n    @implementation SampleLiveViewController\n    ...\n    -(void)nanostreamEventHandlerWithType:(nanostreamEvent)type andLevel:(int)level andDescription:(NSString *)description\n    {\n      switch (type) {\n        case StreamStarted:\n          break;\n        case StreamStopped:\n          break;\n        case StreamError:\n          NSLog(@\nnanostreamEventHandlerWithType: StreamError: %@\n, description);\n          break;\n        case StreamErrorConnect:\n          NSLog(@\nnanostreamEventHandlerWithType: StreamErrorConnect: %@\n, description);\n          break;\n        case StreamConnectionStatus:\n          NSLog(@\nnanostreamEventHandlerWithType: RtmpConnectionStatus %@\n, description);\n            }\n          break;\n        case GeneralError:\n          break;\n        default:\n          break;\n      }\n    }\n    ...\n    @end\n\n\n\n\nConfigure the settings object for the library:\n\n\n    nanostreamAVCSettings *nAVCSettings = [[nanostreamAVCSettings alloc] init];\n\n    // set the rtmp url, you want to stream to\n    [nAVCSettings setUrl: @\nrtmp://localhost/live\n];\n    [nAVCSettings setStreamId: @\nmyStream\n];\n\n    // set the video settings\n    [nAVCSettings setVideoResolution: Resolution640x480];\n    [nAVCSettings setVideoBitrate: 512];\n    [nAVCSettings setKeyFramerate: 60];\n    [nAVCSettings setOrientation: AVCaptureVideoOrientationLandscapeRight];\n    [nAVCSettings setCropMode: NoCrop];\n    [nAVCSettings setFramerate: 30];\n    [nAVCSettings setH264Level: Baseline30];\n\n    // set the audio settings\n    [nAVCSettings setInitialVolume: 1.0];\n    [nAVCSettings setAudioMonoStereo: Stereo];\n    [nAVCSettings setAudioSamplerate: 44100.0f];\n\n\n\n\nThen the library itself can be initialized:\n\n\n    // nAVC and previewView are properties of the controller class in this example\n    self.nAVC = [[nanostreamAVC alloc] initWithSettings: nAVCSettings\n                                              uiPreview: self.previewView\n                                          errorListener: self];\n\n    // set the license key (required for streaming)\n    [self.nanostream setLicense: @\nnlic:1.2:LiveEnc:1.1:LvApp=1.....288\n];\n\n\n\n\nStart a stream\n\n\n    // Start broadcast asynchronously with completion handler\n    [self.nAVC start:^(bool success)\n    {\n      // use main queue to change UI related things\n      dispatch_async(dispatch_get_main_queue(), ^\n      {\n        if (success)\n        {\n          // Handle succesful stream start\n          ...\n        }\n        else\n        {\n          // Handle failure\n          ...\n        }\n      }\n    }\n\n\n\n\nStop a running stream\n\n\nIf the parameter \"blocking\" of the stop method is set to YES, all the remaining data (to this moment) will be sent before stopping the stream.\nIf set to NO, the stream will stop immediately, discarding the remaining data.\n\n\n    // Stop broadcast asynchronously with completion handler\n    [self.nAVC stop:YES withCompletion:^\n    {\n      // use main queue to change UI related things\n      dispatch_async(dispatch_get_main_queue(), ^\n      {\n        // Handle stream stop\n      }\n    }\n\n\n\n\nAdvanced Settings/Usage\n\n\nServer Authentication\n\n\nIn case authentication is required, the credentials can be set with the method \n-(void) setAuthentication: (NSString*) user withPassword: (NSString*) password;\n{objc}\n\n\nThe method has to be invoked before a stream is started.\n\n\nFor example:\n\n\n    // set up nAVC object\n    ...\n    [nAVC setAuthentication: @\nMyUser\n withPassword: @\nMyPassword\n];\n    ...\n    // start the stream\n\n\n\n\nCropping\n\n\nThe stream can be transformed to a different format than the input from the camera.\n\n\nThe following example shows how to crop the format to 16:9.\n\n\n    [nAVCSettings setCropMode: CropTo16By9];\n\n\n\n\n\nLocal Recording\n\n\nIt is possible to make a local copy of the stream, on the iOS device.\nThis is an extra feature and needs to be unlocked by the license - the license should contain the string \"MP4=2\".\n\n\n    NSString *homeDirectory = [NSHomeDirectory() stringByAppendingPathComponent:@\nDocuments\n];\n    NSDateFormatter *dateFormatter=[[NSDateFormatter alloc] init];\n    [dateFormatter setDateFormat:@\nyyyy-MM-dd_HH-mm-ss\n];\n    NSString *locStr = [homeDirectory stringByAppendingPathComponent: [[dateFormatter stringFromDate:[NSDate date]] stringByAppendingString: @\n.mp4\n]];\n\n    [nAVCSettings setLocalRecordingMode:AVCRecordingModeDoubleAtLeastOneMbit];\n    [nAVCSettings setLocalRecordingPath:locStr];\n\n\n\n\nAdaptive Bitrate\n\n\nBy using the Adaptive Bitrate Control (ABC) the stream will automatically adjust to changes of the bandwidth.\nThere are two modes available:\n\n\n\n\n\n\nAdaptiveBitrateControlModeQualityDegrade: The video quality will be changed if the bandwidth changes. For instance, if not enough bandwidth is available, the video bitrate will be decreased, which in turn degrades the video quality.\n\n\n\n\n\n\nAdaptiveBitrateControlModeFrameDrop: Low bandwidth is compensated by decreasing the framerate (FPS), but maintaining the video qualtiy.\n\n\n\n\n\n\nMake sure to set the ABC settings before a stream is started.\n\n\n    [self.nAVC setAdaptiveBitrateControlMode: AdaptiveBitrateControlModeQualityDegrade];\n\n    AdaptiveBitrateControlSettings abr;\n    abr.minimumBitrate = 100000;  // 100kb\n    abr.minimumFramerate = 15;\n    abr.maxPercentBitrateChange = 50;  // if the bitrate drops to less than 50% of the previous bitrate, all buffered data will be discarded\n\n    [self.nAVC setAdaptiveBitrateControlSettings: abr];\n\n\n\n\nPossible properties:\n | property                | default values | range of values    | optional | \n | --------                | -------------- | ---------------    | -------- | \n | minimumBitrate          | 5000 (50 kb)   | 50000 - 10 000 000 | YES      | \n | minimumFramerate        | 15 (fps)       | 5 - 60             | YES      | \n | maxPercentBitrateChange | 50 (%)         | 0 - 100            | YES      | \n\n\n_\n\n\nFor more information look here http://www.nanocosmos.de/v4/documentation/live_video_encoder_-_adaptive_bitrate#abc_modes\n\n\nMeasuring the available bandwidth\n\n\nFor measuring the available bandwidth you can use the method \"runBandwidthCheck\". After the check finished, the result can be used to set the bitrate for the nanostreamAVC object.\n\n\nThe check measures the bandwidth by running a test stream to the server.\n\n\n    NSXBandwidthCheckSettings *bwSettings = [[NSXBandwidthCheckSettings alloc] init];\n    // the URL settings are identical to the URL settings for the nanostreamAVCSettings\n    // for testing the bandwidth it is advised to use the same server you want to stream to\n    // you might want to use a stream id different from the stream id for the actual stream, to distinguish between a bandwidth check and a real stream\n    bwSettings.url = @\nrtmp://localhost/live\n;\n    bwSettings.streamId = @\nbwcheck\n;\n    // the maxium bitrate that should be tested - if this value is lower than the actual bandwidth, the result will be similar to the maximum bitrate\n    bwSettings.maxBitrate = 5000000;  // 5Mb\n\n    [self.nAVC runBandwidthCheck: bwSettings withCompletionBlock:^(NSXBandwidthCheckResult* measuredBandwidth){\n      NSLog(@\nmeasuredBandwidth: avg=%i, median=%i, min=%i, max=%i, runTimeMs=%i\n, (int)measuredBandwidth.avgBitrate, (int)measuredBandwidth.medianBitrate, (int)measuredBandwidth.minBitrate, (int)measuredBandwidth.maxBitrate, (int)measuredBandwidth.runTimeMs);\n    }];\n\n\n\n\nThe default run time is 10 seconds. The run time can be changed with the property \"runTime\".\nIf the bandwidth check should be stopped before it finished on itself, the method \"stopBandwidthCheck\" can be used. This will force the bandwidth check to stop and return the result based on the collected information up to this point.\n\n\n    [self.nAVC stopBandwidthCheck];    // stop bw check if still running\n\n\n\n\nThe result of the bandwidth check can be used as bitrate setting for library object. At the moment it is not possible to change the video bitrate after the initialization of the library object, thus the object need to be re-initialized. (This will change in future releases.)\n\n\nSnaphot from the current stream\n\n\nTo get a snaphot (image) of the current preview/stream, the method \"grabStillImageWithCompletionBlock\" can be used.\n\n\n    [self.nAVC grabStillImageWithCompletionBlock:^(UIImage *image, NSError *error) {\n      // do something with the image\n    }];\n\n\n\n\nOverlay/Watermark\n\n\nIt is possible to use an overlay (image, text, or both) for a stream. Notice that the CPU usage will be increased slightly when an overlay is used.\nThis is an extra feature and needs to be unlocked by the license - the license should contain the string \"OVL=1\".\n\n\nThe easiest way to use an overlay is to use the class \"AVCFullImageOverlay\":\n\n\n    UIImage *overlayImg = [UIImage imageNamed:@\nbutton\n];  // uses an image from the bundle resources, named \nbutton\n\n\n    UIGraphicsBeginImageContextWithOptions(CGSizeMake(640, 480), NO, 1.0);  // assuming the video resolution is set to \nResolution640x480\n\n    [overlayImg drawInRect:CGRectMake(200, 200, 240, 80) blendMode:kCGBlendModeNormal alpha:0.5];\n    UIFont *font = [UIFont boldSystemFontOfSize:20];\n    [[UIColor whiteColor] set];\n    NSString *text = @\nWatermark\n;\n    [text drawInRect:CGRectMake(200, 300, 100, 50) withFont:font];\n    UIImage *finalOverlayImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n\n    [self.nAVC setOverlay: [[AVCFullImageOverlay alloc] initWithImage: finalOverlayImage]];\n\n\n\n\nNotice that the final output resolution can be different, if an option like cropping is used.\nIn this case it is better to implement your own overlay class, which is shown in the following example:\n\n\n    @interface NSXWatermark : NSObject `\nAVCOverlay\n`\n\n    @property (assign) AVCOverlayRawBuffer buffer;\n\n    @end\n\n    @implementation NSXWatermark\n\n    @synthesize imageSize;\n    @synthesize overlayBoundingRect;\n\n    -(AVCOverlayRawBuffer)overlayImageWithStreamTime:(NSTimeInterval)time\n    {\n        if (self.buffer.buffer == NULL) {\n            UIImage *image = [NSXWatermark generateWatermarkWithSize:self.imageSize inBoundingRect:self.overlayBoundingRect];\n            self.buffer = [NSXWatermark makeBufferFromUIImage:image];\n        }\n\n        return self.buffer;\n    }\n\n    +(UIImage *)generateWatermarkWithSize:(CGSize)size inBoundingRect:(CGRect)boundingRect\n    {\n        UIImage *watermarkImage = ...  // use your desired UIImage here\n        CGFloat padding = 10.0;\n        CGSize overlaySize = watermarkImage.size;\n\n        CGFloat height = size.height / 3;\n        if (overlaySize.height \n height) {\n            overlaySize.width = height;\n            overlaySize.height = height;\n        }\n\n        CGFloat boundingMaxX = boundingRect.origin.x + boundingRect.size.width;\n        CGFloat boundingMaxY = boundingRect.origin.y + boundingRect.size.height;\n\n        CGRect overlayRect = CGRectMake(boundingMaxX - overlaySize.width, boundingMaxY - overlaySize.height, overlaySize.width, overlaySize.height);\n\n        //    CGRect overlayRect = CGRectMake(size.width - overlaySize.width, size.height - overlaySize.height, overlaySize.width, overlaySize.height);\n        CGRect realRect =  AVMakeRectWithAspectRatioInsideRect(watermarkImage.size, overlayRect);\n\n        realRect.origin.y -= padding;\n        realRect.origin.x -= padding;\n\n        UIGraphicsBeginImageContext(size);\n        [watermarkImage drawInRect:realRect];\n\n        UIImage *overlayImage = UIGraphicsGetImageFromCurrentImageContext();\n\n        UIGraphicsEndImageContext();\n\n        return overlayImage;\n    }\n\n    +(AVCOverlayRawBuffer)makeBufferFromUIImage:(UIImage *)image\n    {\n        CGImageRef rawPic = [image CGImage];\n\n        CGDataProviderRef inProvider = CGImageGetDataProvider(rawPic);\n        CFDataRef inBitmapData = CGDataProviderCopyData(inProvider);\n\n        size_t inBitmapDataBytesPerRow = CGImageGetBytesPerRow(rawPic);\n\n        UInt8 *buffer = (UInt8*)CFDataGetBytePtr(inBitmapData);\n\n        AVCOverlayRawBuffer rawBuf;\n        rawBuf.buffer = buffer;\n        rawBuf.bytesPerRow = (int)inBitmapDataBytesPerRow;\n        rawBuf.bufferType = AVCOverlayBufferTypeBGRA;\n        return rawBuf;\n    }\n    @end\n\n\n\n\nPossible Issues\n\n\nGeneral\n\n\nFor older versions of the sdk, without support for arm64, architecture in Xcode has to be set to armv7 and/or armv7s. This works also for newer iOS-Devcies like iPhone 5s.\nThis is not required for newer sdk versions, which also support arm64.\n\n\nCompiler/Linker\n\n\nlibstdc++\n\n\nIf there are linker errors with \"std::\": \"symbol(s) not found for architecture\", make sure that you added the libraries \"libstdc++.dylib\" and \"libc++.dylib\" to your project.\n\n\nDue to a bug in Xcode, depending on the selected Base SDK and deployment target, there might be still linker errors regarding \"std\". In this case you need to add a specific version of the libstdc++ to your project, e.g.: libstdc++-6.0.9.dylib instead of libstdc++.dylib\n\n\nUndefined Symbols for Parrot \n DJI\n\n\nSince version 3.3.x it might be possible that there are linker errors for the classes\n\n\n\n\n\n\nParrotBebopCaptureSession or\n\n\n\n\n\n\nDJIPhantom2CaptureSession\n\n\n\n\n\n\nGenerally, if the Parrot \n DJI extensions are not used, the symbols should be stripped automatically by Xcode and you do not need to link the frameworks. \nHowever this is not the case when the linker flag \"-ObjC\" is used in the app project. This causes the linker to load all symbols included in all linked object files (including the Parrot \n DJI symbols). This prevents the automatic stripping. \n\n\nTo use our library without Parrot \n DJI, either remove the \"-ObjC\" linker flag from the project or replace the \"-ObjC\" linker flag with the \"-force_load\" flag for each library that you want to use. Do not use \"-force_load\" with libnanostreamAVC.a. \nFor examples see http://stackoverflow.com/questions/11254269/using-the-force-load-linker-flag-with-restkit-ios\n\n\nCrashes\n\n\nCALayerGetDelegate / CALayerGetSuperlayer / Other CALayer\n\n\nIf there are crashes occurring in your app that include above symbols in the stack trace and are otherwise not obvious, check to see if you added a subviews to the preview view. The UIView instance that is passed to \n\n\n    -[RtmpSourceCaptureSession initWithPreview:andStatusListener:andLogLevel:]\n\n\n\n\nand \n\n\n-[nanostreamAVC initWithSettings:uiPreview:errorListener:]\n \n\n\ncannot contain any subviews (UIButtons or otherwise).\n\n\nLogging Information\n\n\nIf you encounter a problem with the nanostreamAVC library and you want to report the problem, log files will help us to comprehend the problem.\n\n\nPlease use the following steps to create the log files:\n\n\n\n\nenable logging for the library with the method \"SetLogLevel\", use LogLevelVerbose:\n\n\n\n\n        [self.nAVC SetLogLevel: LogLevelVerbose];  // set the log level before the method \nstart\n is invoked\n\n\n\n\n\n\n\n\ntry to reproduce the problem\n\n\n\n\n\n\ndownload the app container (for your app) from the iOS device with Xcode, as explained here: https://developer.apple.com/library/ios/recipes/xcode_help-devices_organizer/articles/manage_containers.html\n\n\n\n\n\n\nin Finder right click on the downloaded container and select \"Show Package Contents\"\n\n\n\n\n\n\nsend us the logfiles located (in the container) in the folder \"/AppData/Library/Caches/Logs/\"", 
            "title": "ios api"
        }, 
        {
            "location": "/nanostream-ios-sdk/#nanostream-sdk-for-ios-developer-manual", 
            "text": "", 
            "title": "nanoStream SDK for iOS - Developer Manual"
        }, 
        {
            "location": "/nanostream-ios-sdk/#purpose", 
            "text": "This documentation is about the nanoStream Live Video Streaming SDK for iOS and can be used by software developers to integrate nanoStream Live Video Encoding into custom apps.", 
            "title": "Purpose"
        }, 
        {
            "location": "/nanostream-ios-sdk/#requirements", 
            "text": "Apple Mac with MacOS 10.9 with XCode 6    Apple iPhone with iOS 7 or later (min. iOS 8.1 recommended)", 
            "title": "Requirements"
        }, 
        {
            "location": "/nanostream-ios-sdk/#getting-started", 
            "text": "Preparation  Add the library \"libnanostreamAVC.a\" as dependency (Link Binary With Libraries) to your project.\nFurther required dependencies:    libc++.dylib    libstdc++.dylib    AVFoundation.framework    Accelerate.framework    CoreGraphics.framework    CoreMedia.framework    CoreVideo.framework    Foundation.framework    SystemConfiguration.framework    VideoToolbox.framework (link as Optional, not as Required)    AudioToolbox.framework    Include the header \"libnanostreamAVC.h\" in your source code.  Check library version      int version = [nanostreamAVC getVersion];\n    if(version!=NANOSTREAM_AVC_VERSION)\n    {\n      // Handle header and library version mismatch\n    }  Initialize the library  Implement the interface \"nanostreamEventListener\" in your class:      @interface SampleLiveViewController : UIViewController ` nanostreamEventListener `\n    ...\n    @property (nonatomic, strong) nanostreamAVC *nAVC;\n    @property (nonatomic, strong) IBOutlet UIView *previewView;\n    ...\n    @end\n\n    @implementation SampleLiveViewController\n    ...\n    -(void)nanostreamEventHandlerWithType:(nanostreamEvent)type andLevel:(int)level andDescription:(NSString *)description\n    {\n      switch (type) {\n        case StreamStarted:\n          break;\n        case StreamStopped:\n          break;\n        case StreamError:\n          NSLog(@ nanostreamEventHandlerWithType: StreamError: %@ , description);\n          break;\n        case StreamErrorConnect:\n          NSLog(@ nanostreamEventHandlerWithType: StreamErrorConnect: %@ , description);\n          break;\n        case StreamConnectionStatus:\n          NSLog(@ nanostreamEventHandlerWithType: RtmpConnectionStatus %@ , description);\n            }\n          break;\n        case GeneralError:\n          break;\n        default:\n          break;\n      }\n    }\n    ...\n    @end  Configure the settings object for the library:      nanostreamAVCSettings *nAVCSettings = [[nanostreamAVCSettings alloc] init];\n\n    // set the rtmp url, you want to stream to\n    [nAVCSettings setUrl: @ rtmp://localhost/live ];\n    [nAVCSettings setStreamId: @ myStream ];\n\n    // set the video settings\n    [nAVCSettings setVideoResolution: Resolution640x480];\n    [nAVCSettings setVideoBitrate: 512];\n    [nAVCSettings setKeyFramerate: 60];\n    [nAVCSettings setOrientation: AVCaptureVideoOrientationLandscapeRight];\n    [nAVCSettings setCropMode: NoCrop];\n    [nAVCSettings setFramerate: 30];\n    [nAVCSettings setH264Level: Baseline30];\n\n    // set the audio settings\n    [nAVCSettings setInitialVolume: 1.0];\n    [nAVCSettings setAudioMonoStereo: Stereo];\n    [nAVCSettings setAudioSamplerate: 44100.0f];  Then the library itself can be initialized:      // nAVC and previewView are properties of the controller class in this example\n    self.nAVC = [[nanostreamAVC alloc] initWithSettings: nAVCSettings\n                                              uiPreview: self.previewView\n                                          errorListener: self];\n\n    // set the license key (required for streaming)\n    [self.nanostream setLicense: @ nlic:1.2:LiveEnc:1.1:LvApp=1.....288 ];  Start a stream      // Start broadcast asynchronously with completion handler\n    [self.nAVC start:^(bool success)\n    {\n      // use main queue to change UI related things\n      dispatch_async(dispatch_get_main_queue(), ^\n      {\n        if (success)\n        {\n          // Handle succesful stream start\n          ...\n        }\n        else\n        {\n          // Handle failure\n          ...\n        }\n      }\n    }  Stop a running stream  If the parameter \"blocking\" of the stop method is set to YES, all the remaining data (to this moment) will be sent before stopping the stream.\nIf set to NO, the stream will stop immediately, discarding the remaining data.      // Stop broadcast asynchronously with completion handler\n    [self.nAVC stop:YES withCompletion:^\n    {\n      // use main queue to change UI related things\n      dispatch_async(dispatch_get_main_queue(), ^\n      {\n        // Handle stream stop\n      }\n    }", 
            "title": "Getting Started"
        }, 
        {
            "location": "/nanostream-ios-sdk/#advanced-settingsusage", 
            "text": "Server Authentication  In case authentication is required, the credentials can be set with the method  -(void) setAuthentication: (NSString*) user withPassword: (NSString*) password; {objc}  The method has to be invoked before a stream is started.  For example:      // set up nAVC object\n    ...\n    [nAVC setAuthentication: @ MyUser  withPassword: @ MyPassword ];\n    ...\n    // start the stream  Cropping  The stream can be transformed to a different format than the input from the camera.  The following example shows how to crop the format to 16:9.      [nAVCSettings setCropMode: CropTo16By9];  Local Recording  It is possible to make a local copy of the stream, on the iOS device.\nThis is an extra feature and needs to be unlocked by the license - the license should contain the string \"MP4=2\".      NSString *homeDirectory = [NSHomeDirectory() stringByAppendingPathComponent:@ Documents ];\n    NSDateFormatter *dateFormatter=[[NSDateFormatter alloc] init];\n    [dateFormatter setDateFormat:@ yyyy-MM-dd_HH-mm-ss ];\n    NSString *locStr = [homeDirectory stringByAppendingPathComponent: [[dateFormatter stringFromDate:[NSDate date]] stringByAppendingString: @ .mp4 ]];\n\n    [nAVCSettings setLocalRecordingMode:AVCRecordingModeDoubleAtLeastOneMbit];\n    [nAVCSettings setLocalRecordingPath:locStr];  Adaptive Bitrate  By using the Adaptive Bitrate Control (ABC) the stream will automatically adjust to changes of the bandwidth.\nThere are two modes available:    AdaptiveBitrateControlModeQualityDegrade: The video quality will be changed if the bandwidth changes. For instance, if not enough bandwidth is available, the video bitrate will be decreased, which in turn degrades the video quality.    AdaptiveBitrateControlModeFrameDrop: Low bandwidth is compensated by decreasing the framerate (FPS), but maintaining the video qualtiy.    Make sure to set the ABC settings before a stream is started.      [self.nAVC setAdaptiveBitrateControlMode: AdaptiveBitrateControlModeQualityDegrade];\n\n    AdaptiveBitrateControlSettings abr;\n    abr.minimumBitrate = 100000;  // 100kb\n    abr.minimumFramerate = 15;\n    abr.maxPercentBitrateChange = 50;  // if the bitrate drops to less than 50% of the previous bitrate, all buffered data will be discarded\n\n    [self.nAVC setAdaptiveBitrateControlSettings: abr];  Possible properties:\n | property                | default values | range of values    | optional | \n | --------                | -------------- | ---------------    | -------- | \n | minimumBitrate          | 5000 (50 kb)   | 50000 - 10 000 000 | YES      | \n | minimumFramerate        | 15 (fps)       | 5 - 60             | YES      | \n | maxPercentBitrateChange | 50 (%)         | 0 - 100            | YES      |   _  For more information look here http://www.nanocosmos.de/v4/documentation/live_video_encoder_-_adaptive_bitrate#abc_modes  Measuring the available bandwidth  For measuring the available bandwidth you can use the method \"runBandwidthCheck\". After the check finished, the result can be used to set the bitrate for the nanostreamAVC object.  The check measures the bandwidth by running a test stream to the server.      NSXBandwidthCheckSettings *bwSettings = [[NSXBandwidthCheckSettings alloc] init];\n    // the URL settings are identical to the URL settings for the nanostreamAVCSettings\n    // for testing the bandwidth it is advised to use the same server you want to stream to\n    // you might want to use a stream id different from the stream id for the actual stream, to distinguish between a bandwidth check and a real stream\n    bwSettings.url = @ rtmp://localhost/live ;\n    bwSettings.streamId = @ bwcheck ;\n    // the maxium bitrate that should be tested - if this value is lower than the actual bandwidth, the result will be similar to the maximum bitrate\n    bwSettings.maxBitrate = 5000000;  // 5Mb\n\n    [self.nAVC runBandwidthCheck: bwSettings withCompletionBlock:^(NSXBandwidthCheckResult* measuredBandwidth){\n      NSLog(@ measuredBandwidth: avg=%i, median=%i, min=%i, max=%i, runTimeMs=%i , (int)measuredBandwidth.avgBitrate, (int)measuredBandwidth.medianBitrate, (int)measuredBandwidth.minBitrate, (int)measuredBandwidth.maxBitrate, (int)measuredBandwidth.runTimeMs);\n    }];  The default run time is 10 seconds. The run time can be changed with the property \"runTime\".\nIf the bandwidth check should be stopped before it finished on itself, the method \"stopBandwidthCheck\" can be used. This will force the bandwidth check to stop and return the result based on the collected information up to this point.      [self.nAVC stopBandwidthCheck];    // stop bw check if still running  The result of the bandwidth check can be used as bitrate setting for library object. At the moment it is not possible to change the video bitrate after the initialization of the library object, thus the object need to be re-initialized. (This will change in future releases.)  Snaphot from the current stream  To get a snaphot (image) of the current preview/stream, the method \"grabStillImageWithCompletionBlock\" can be used.      [self.nAVC grabStillImageWithCompletionBlock:^(UIImage *image, NSError *error) {\n      // do something with the image\n    }];  Overlay/Watermark  It is possible to use an overlay (image, text, or both) for a stream. Notice that the CPU usage will be increased slightly when an overlay is used.\nThis is an extra feature and needs to be unlocked by the license - the license should contain the string \"OVL=1\".  The easiest way to use an overlay is to use the class \"AVCFullImageOverlay\":      UIImage *overlayImg = [UIImage imageNamed:@ button ];  // uses an image from the bundle resources, named  button \n\n    UIGraphicsBeginImageContextWithOptions(CGSizeMake(640, 480), NO, 1.0);  // assuming the video resolution is set to  Resolution640x480 \n    [overlayImg drawInRect:CGRectMake(200, 200, 240, 80) blendMode:kCGBlendModeNormal alpha:0.5];\n    UIFont *font = [UIFont boldSystemFontOfSize:20];\n    [[UIColor whiteColor] set];\n    NSString *text = @ Watermark ;\n    [text drawInRect:CGRectMake(200, 300, 100, 50) withFont:font];\n    UIImage *finalOverlayImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n\n    [self.nAVC setOverlay: [[AVCFullImageOverlay alloc] initWithImage: finalOverlayImage]];  Notice that the final output resolution can be different, if an option like cropping is used.\nIn this case it is better to implement your own overlay class, which is shown in the following example:      @interface NSXWatermark : NSObject ` AVCOverlay `\n\n    @property (assign) AVCOverlayRawBuffer buffer;\n\n    @end\n\n    @implementation NSXWatermark\n\n    @synthesize imageSize;\n    @synthesize overlayBoundingRect;\n\n    -(AVCOverlayRawBuffer)overlayImageWithStreamTime:(NSTimeInterval)time\n    {\n        if (self.buffer.buffer == NULL) {\n            UIImage *image = [NSXWatermark generateWatermarkWithSize:self.imageSize inBoundingRect:self.overlayBoundingRect];\n            self.buffer = [NSXWatermark makeBufferFromUIImage:image];\n        }\n\n        return self.buffer;\n    }\n\n    +(UIImage *)generateWatermarkWithSize:(CGSize)size inBoundingRect:(CGRect)boundingRect\n    {\n        UIImage *watermarkImage = ...  // use your desired UIImage here\n        CGFloat padding = 10.0;\n        CGSize overlaySize = watermarkImage.size;\n\n        CGFloat height = size.height / 3;\n        if (overlaySize.height   height) {\n            overlaySize.width = height;\n            overlaySize.height = height;\n        }\n\n        CGFloat boundingMaxX = boundingRect.origin.x + boundingRect.size.width;\n        CGFloat boundingMaxY = boundingRect.origin.y + boundingRect.size.height;\n\n        CGRect overlayRect = CGRectMake(boundingMaxX - overlaySize.width, boundingMaxY - overlaySize.height, overlaySize.width, overlaySize.height);\n\n        //    CGRect overlayRect = CGRectMake(size.width - overlaySize.width, size.height - overlaySize.height, overlaySize.width, overlaySize.height);\n        CGRect realRect =  AVMakeRectWithAspectRatioInsideRect(watermarkImage.size, overlayRect);\n\n        realRect.origin.y -= padding;\n        realRect.origin.x -= padding;\n\n        UIGraphicsBeginImageContext(size);\n        [watermarkImage drawInRect:realRect];\n\n        UIImage *overlayImage = UIGraphicsGetImageFromCurrentImageContext();\n\n        UIGraphicsEndImageContext();\n\n        return overlayImage;\n    }\n\n    +(AVCOverlayRawBuffer)makeBufferFromUIImage:(UIImage *)image\n    {\n        CGImageRef rawPic = [image CGImage];\n\n        CGDataProviderRef inProvider = CGImageGetDataProvider(rawPic);\n        CFDataRef inBitmapData = CGDataProviderCopyData(inProvider);\n\n        size_t inBitmapDataBytesPerRow = CGImageGetBytesPerRow(rawPic);\n\n        UInt8 *buffer = (UInt8*)CFDataGetBytePtr(inBitmapData);\n\n        AVCOverlayRawBuffer rawBuf;\n        rawBuf.buffer = buffer;\n        rawBuf.bytesPerRow = (int)inBitmapDataBytesPerRow;\n        rawBuf.bufferType = AVCOverlayBufferTypeBGRA;\n        return rawBuf;\n    }\n    @end", 
            "title": "Advanced Settings/Usage"
        }, 
        {
            "location": "/nanostream-ios-sdk/#possible-issues", 
            "text": "General  For older versions of the sdk, without support for arm64, architecture in Xcode has to be set to armv7 and/or armv7s. This works also for newer iOS-Devcies like iPhone 5s.\nThis is not required for newer sdk versions, which also support arm64.  Compiler/Linker  libstdc++  If there are linker errors with \"std::\": \"symbol(s) not found for architecture\", make sure that you added the libraries \"libstdc++.dylib\" and \"libc++.dylib\" to your project.  Due to a bug in Xcode, depending on the selected Base SDK and deployment target, there might be still linker errors regarding \"std\". In this case you need to add a specific version of the libstdc++ to your project, e.g.: libstdc++-6.0.9.dylib instead of libstdc++.dylib  Undefined Symbols for Parrot   DJI  Since version 3.3.x it might be possible that there are linker errors for the classes    ParrotBebopCaptureSession or    DJIPhantom2CaptureSession    Generally, if the Parrot   DJI extensions are not used, the symbols should be stripped automatically by Xcode and you do not need to link the frameworks. \nHowever this is not the case when the linker flag \"-ObjC\" is used in the app project. This causes the linker to load all symbols included in all linked object files (including the Parrot   DJI symbols). This prevents the automatic stripping.   To use our library without Parrot   DJI, either remove the \"-ObjC\" linker flag from the project or replace the \"-ObjC\" linker flag with the \"-force_load\" flag for each library that you want to use. Do not use \"-force_load\" with libnanostreamAVC.a. \nFor examples see http://stackoverflow.com/questions/11254269/using-the-force-load-linker-flag-with-restkit-ios  Crashes  CALayerGetDelegate / CALayerGetSuperlayer / Other CALayer  If there are crashes occurring in your app that include above symbols in the stack trace and are otherwise not obvious, check to see if you added a subviews to the preview view. The UIView instance that is passed to       -[RtmpSourceCaptureSession initWithPreview:andStatusListener:andLogLevel:]  and   -[nanostreamAVC initWithSettings:uiPreview:errorListener:]    cannot contain any subviews (UIButtons or otherwise).", 
            "title": "Possible Issues"
        }, 
        {
            "location": "/nanostream-ios-sdk/#logging-information", 
            "text": "If you encounter a problem with the nanostreamAVC library and you want to report the problem, log files will help us to comprehend the problem.  Please use the following steps to create the log files:   enable logging for the library with the method \"SetLogLevel\", use LogLevelVerbose:           [self.nAVC SetLogLevel: LogLevelVerbose];  // set the log level before the method  start  is invoked    try to reproduce the problem    download the app container (for your app) from the iOS device with Xcode, as explained here: https://developer.apple.com/library/ios/recipes/xcode_help-devices_organizer/articles/manage_containers.html    in Finder right click on the downloaded container and select \"Show Package Contents\"    send us the logfiles located (in the container) in the folder \"/AppData/Library/Caches/Logs/\"", 
            "title": "Logging Information"
        }, 
        {
            "location": "/nanostream-macos-sdk/", 
            "text": "~~CLOSETOC~~\n\n\nnanoStream MacOS API\n\n\nIntro\n\n\nThe nanoStream MacOS dylib API is a video capture and encoding software for streaming live video and audio to internet based media servers and other network clients.\n\n\nThe nanoStream MacOS dylib API supports internet broadcast streaming and local recording at the same time. A lots of video devices are supported, also Blackmagic devices. The resolution, frame rate, samplerate and more can be manipulated. For a full feature list and platform specific features look at the method list below.\n\n\nIt works perfectly together with internet streaming servers like Wowza Media Server and Flash Media Server, streaming to Mobile devices like iPhone, Silverlight and other playback clients is possible.\n\n\n\n\nNote: this is preliminary documentation, please contact us for further information or help.\n\n\n\n\nSetup:\n\n\nThe best way to start is using the C++ sample code included in the SDK.\n\n\nSystem Requirements:\n\n\nMac OSX 10.9 or newer, Windows 7 or newer\n\n\nHardware Requirements:\n\n\nIntel Core2 Duo or later\n\n\nRecommended for HD capture: Intel Core i7 or Xeon\n\n\n| \nMethod Name\n             | \nDescription\n                                     | libnanoStream.dylib Support | Mac Plugin Support | Mac Framework Support | ANE Support|\n| InitPlugin              | Initialization of the Plugin.                               |  nanoStream  |  initEncoder  |  init  |  \u2714  |\n| SetXml                  | deprecated - no functionality                          |  \u2718  |  \u2718  |  \u2718  |  \u2714  |\n| GetVersion              | Get version number of the SDK                                                                     |   \u2714  |    |    |  |\n| SetLicense              | Set license for nano SDK                               |  \u2714  |  \u2714  |  \u2714   |  \u2714  |\n| GetLicense              | Get the current license of the SDK                                                                     |  \u2714  |    |    |  |\n| SetConfig               | Set property over Identifier.                            |  \u2714  |  \u2714  |  \u2714  |  \u2714  |\n| UpdatePreviewDimensions | Update preview dimensions of the bmp           |  \u2718  |  \u2718   |  \u2718   |  \u2714  |\n| GetPreviewDimensions              | Get the current preview dimensions                                                                      |  \u2714   |    |    |  |\n| GetPreviewImage              | Get the preview image                                                                     |  \u2714  |    |    |  |\n| GetPreviewFrame         | Get current preview Frame                       |  \u2718  |  \u2718  |  \u2718  |  \u2714  |\n| StartPreview            | Start the preview.                              |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| StopPreview             | Stop the preview.                              |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| StartBroadcast          | Start broadcasting.                             |  \u2714  |  \u2714  |  startStream  |  \u2714  |\n| StopBroadcast           | Stop broadcasting.                              |  \u2714  |  \u2714  |  stopStream  |  \u2714  |\n| GetNumberOfVideoSources | Count video sources with current settings       |  \u2714  |  \u2714  |  \u2714  |  \u2714  |\n| GetNumberOfAudioSources | Count audio sources with current settings      |  \u2714   |  \u2714  |  \u2714  |  \u2714  |\n| GetVideoSource          | Get name of the video source as string.         |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| GetAudioSource          | Get name of the audio source as string.         |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| SetVideoSource          | Set video source for preview or broadcasting    |  \u2714  |  VideoSource  |  \u2718   |  \u2714  |\n| SetVideoSourceFromURL   | URL to an mp4 file source or ramp source        |  \u2718  |  \u2718  |  \u2718  |  \u2714  |\n| SetAudioSource          | Set audio source for preview or broadcasting    |  \u2714  |  AudioSource  |  \u2718  |  \u2714  |\n| SetVideoWidth           | Set width of video in pixels                   |  \u2714  |  VideoWidth  |  \u2714  |  \u2714  |\n| GetVideoWidth           | Get width of video in pixels                   |  \u2714  |  VideoWidth  |    |    |\n| SetVideoHeight          | Set height of video in pixels                   |  \u2714  |  VideoHeight  |  \u2714  |  \u2714  |\n| GetVideoHeight          | Get height of video in pixels                   |  \u2714  |  VideoHeight  |   |   |\n| SetVideoResizeWidth     | Resize width of video in pixels                |  \u2718   |  \u2714  |  \u2718  |  \u2714  |\n| SetVideoResizeHeight    | Resize height of video in pixels               |  \u2718  |  \u2714  |  \u2718  |  \u2714  |\n| SetVideoFramerate       | Set frame rate of video in frames per second    |  SetFramerate   |  VideoFrameRate  |  setFrameRate  |  \u2714  |\n| SetNumberOfChannels              | set channel number                                                                      |  \u2714   |    |    |  |\n| SetVideoBitrate         | Set bitrate of video in kbits per second        |  \u2714  |  \u2714  |  \u2714   |  \u2714  |\n| GetVideoBitrate              | Get the current video bitrate                                                                     |  \u2714  |    |    |  |\n| SetAudioBitrate         | Set bitrate of audio in kbits per second       |  \u2714  |  \u2714  |  \u2714  |  \u2714  |\n| GetAudioBitrate              | Get the current audio bitrate                                                                     |  \u2714   |    |    |  |\n| SetAudioSamplerate      | Set the samplerate of the audio in Hertz        |  \u2714  |  \u2718  |  setSampleRate   |  \u2714  |\n| GetAudioLevel           | Get the audio level of a channel                |  \u2714  |  \u2714  |  \u2714   |  \u2714  |\n| SetAudioVolume          | Set audio volume                               |  \u2714  |  AudioVolume  |  \u2718  |  \u2714  |\n| SetAudioPreviewVolume   | Set audio volume of preview                    |  \u2714  |  AudioPreviewVolume  |  \u2718  |  \u2714  |\n| SetColorSpace           | Set the color space of an input source         |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| GetNumberOfColorspaces  | Get the count of color spaces                  |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| GetColorspace           | Get color space name as string                  |  \u2714  |  \u2714  |  \u2714  |  \u2714  |\n| GetNumberOfResolutions  | Get count of available resolutions             |  \u2714   |  \u2714  |  \u2718  |  \u2714  |\n| GetResolution           | Get count of resolutions                       |  \u2714   |  \u2714  |  \u2718  |  \u2714  |\n| GetNumberOfFramerates   | Count of available frame rates as integer value |  GetNumberOfFrameRates  |  \u2714  |  \u2718  |  \u2714  |\n| GetFramerate            | Get the frame rate of a video source           |  \u2714   |  \u2714  |  getFrameRate  |  \u2714  |\n| SetDeinterlacing        | Set deinterlacing mode and method              |  \u2718   |  \u2718  |  \u2718  |  \u2714  |\n| GetNumberOfOutputs      | Get count of output sources                    |  \u2718  |  \u2714  |  \u2718  |  \u2714  |\n| AddOutput               | Add new output source with url                 |  \u2718   |  \u2714  |  \u2718  |  \u2714  |\n| SetOutputUrl            | Set output source with url. Local or rtmp       |  \u2714   |  \u2714  |  setOutputUrl   |  \u2714  |\n| GetOutputUrl              |                                                                      |  \u2714  |    |    |  |\n| GetNumberOfOutputUrls              |                                                                      |  \u2714  |    |    |  |\n| AcceptDataInSampleBuffer              |                                                                      |  \u2714   |    |    |  |\n| AddSampleBuffer              |                                                                      |  \u2714  |    |    |  |\n| SetFilesourceFilename   | Set the filename of a local source            |  \u2718   |  \u2718  |  \u2718  |  \u2714  |\n| ClearOutputs            | Reset all output sources                      |   \u2718   |  \u2714  |  \u2718  |  \u2714  |\n| SetVideoEffect          | Add a video effect.                            |  \u2718   |  \u2714  |  \u2718  |  \u2714  |\n| SetOverlay              | Add a overlay to the video                     |   \u2718   |  \u2718  |  \u2718  |  \u2714  |\n| ShowPropertyPage        | Show property page                            |   \u2718    |  \u2714  |  \u2718   |  \u2714  |\n| SetLog                  | Set log file path and log level.               |  \u2714  |  \u2714  |  \u2714  |  \u2714  |\n| SetXmlProfile              |                                                                      |  \u2714   |    |    |  |\n| dispose():void          | Reset buffer                                  |  \u2718   |  \u2718  |  \u2718  |  \u2714  |\n\n\nMethod Description:\n\n\n===== Setup the Plugin =====\n\n\n==== InitPlugin ====\n\n\n=== Declaration ===\n\n\nInitPlugin(xmlPath:String):int\n\n\n=== Parameters ===\n\n\n\n\n\n\n\n\nxmlPath:String\n\n\nPath to the xml file with configuration information, can be local or a url.\n\n\n\n\n\n\n\n\n\n\n=== Return Value ===\n\n\n-1\n if the initialization failed\n\n\n=== Description ===\n\n\nInitialization of the plugin.\n\n\n=== Availability ===\n\n\nOn Windows and Mac OSX\n\n\n==== GetVersion ====\n\n\n=== Declaration ===\n\n\nGetVersion()\n\n\n=== Return Value ===\n\n\nVersion number as int value\n\n\n=== Description ===\n\n\nReturn the version number of the SDK as int value\n\n\n=== Availability ===\n\n\nOn Mac OSX\n==== SetLicense ====\n\n\n=== Declaration ===\n\n\nSetLicense(licenseStr:String):int\n\n\n=== Parameters ===\n\n\n| licenseStr:String | License String getting from nano. |\n\n\n=== Return Value ===\n\n\n-\n1\n if call failed\n\n\n=== Description ===\n\n\nSet license for nano SDK\n\n\n=== Availability ===\n\n\nOn Windows and Mac OSX\n\n\n==== GetLicense ====\n\n\n=== Declaration ===\n\n\nGetLicense()\n\n\n=== Return Value ===\n\n\nString represantation of the license\n\n\n=== Description ===\n\n\nGet license for nano SDK\n\n\n=== Availability ===\n\n\nOn Mac OSX\n\n\nSetConfig\n\n\nDeclaration\n\n\nSetConfig(property:String, value:String):int\n\n\nParameters\n\n\n| property:String | Property identifier as string. See property list for configuration on page 32. |\n| value:String    | Value for property as string representation.                                   |\n\n\nReturn Value\n\n\n1\n if call was successful, \n0\n otherwise\n\n\nDescription\n\n\nSet property over Identifier.\n\n\nAvailability\n\n\nOn Windows and Mac OSX\n\n\nPreview\n\n\nUpdatePreviewDimensions\n\n\nDeclaration\n\n\nUpdatePreviewDimensions():void\n\n\nDescription\n\n\nUpdates the preview with the current width and height.\n\n\nAvailability\n\n\nOn Windows and Mac OSX\n\n\nGetPreviewDimensions\n\n\n=== Declaration ===\n\n\nGetPreviewDimensions(long \nwidth, long \nheight, long *size)\n\n\n=== Parameters ===\n\n\n| width:long | Pointer to return the video width |\n| height:long | Pointer to return the video height |\n| size:long | Pointer to return the video size |\n\n\n=== Return Value ===\n\n\n1\n if call failed, \n0\n otherwise\n\n\n=== Description ===\n\n\nGet the current preview dimensions.\n\n\nGetPreviewImage\n\n\n=== Declaration ===\n\n\nGetPreviewImage(char *pixelBuffer, int size)\n\n\n=== Parameters ===\n\n\n| pixelBuffer:char | pixel buffer|\n| size:int | size |\n\n\n=== Return Value ===\n\n\n1\n if call failed, \n0\n otherwise\n\n\n=== Description ===\n\n\nGet the preview image.\n\n\nGetPreviewFrame\n\n\n=== Declaration ===\n\n\nGetPreviewFrame(options:int = GET_FRAME_BITMAP):Boolean\n\n\n=== Parameters ===\n\n\n| options:int | option as integer. Default is GET_FRAME_BITMAP = 2. A\\  Also possible: \\  GET_FRAME_RAW_BYTES:int = 4,\\  GET_POWER_OF_2_FRAME_BGRA_BYTES:int = 8 |\n\n\n=== Return Value ===\n\n\nTrue if new frame was received otherwise false\n\n\n=== Description ===\n\n\nGet current preview Frame.\n\n\nStartPreview\n\n\nDeclaration\n\n\nStartPreview():int\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nStart the preview.\n\n\nAvailability\n\n\nOn Windows and Mac OSX\n\n\nStopPreview\n\n\nDeclaration\n\n\nStopPreview():int\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nStop the preview.\n\n\nAvailability\n\n\nOn Windows and Mac OSX\n\n\nBroadcast\n\n\nStartBroadcast\n\n\nDeclaration\n\n\nStartBroadcast():int\n\n\nReturn Value\n\n\nERROR_SETUP_ENCODER_FAILED = -2\n\n\nERROR_RTMP_OUTPUT_SOURCE1_FAILED = 2\n\n\nERROR_RTMP_OUTPUT_SOURCE2_FAILED = 3\n\n\nDescription\n\n\nStart broadcasting.\n\n\nAvailability\n\n\nOn Windows and Mac OSX\n\n\nStopBroadcast\n\n\nDeclaration\n\n\nStopBroadcast():int\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nStop broadcasting.\n\n\nAvailability\n\n\nOn Windows and Mac OSX\n\n\nVideo Source \n Audio Source handling\n\n\nGetNumberOfVideoSources\n\n\nDeclaration\n\n\nGetNumberOfVideoSources():int\n\n\nReturn Value\n\n\nCount of all available video sources.\n\n\nDescription\n\n\nCount of all available video sources with current settings\n\n\nAvailability\n\n\nOn Windows and Mac OSX\n\n\nGetNumberOfAudioSources\n\n\nDeclaration\n\n\nGetNumberOfAudioSources():int\n\n\nReturn Value\n\n\nCount of all available audio sources.\n\n\nDescription\n\n\nCount of all available audio sources with current settings\n\n\nAvailability\n\n\nOn Windows and Mac OSX\n\n\nGetVideoSource\n\n\nDeclaration\n\n\nGetVideoSource(index:int):String\n\n\nParameters\n\n\n| index:int | Index of the video source. The index of the video source, from \n0 - GetNumberOfVideoSources -1\n |\n\n\nReturn Value\n\n\nVideo source name as string.\n\n\nDescription\n\n\nGet name of the video source as string. Call \nGetNumberOfVideoSources\n first.\n\n\nAvailability\n\n\nOn Windows and Mac OSX\n\n\nGetAudioSource\n\n\nDeclaration\n\n\nGetAudioSource(index:int):String\n\n\nParameters\n\n\n| index:int | Index of the audio source. The index of the audio source, from \n0 - GetNumberOfAudioSources -1\n |\n\n\nReturn Value\n\n\nAudio source name as string.\n\n\nDescription\n\n\nGet name of the audio source as string. Call \nGetNumberOfAudioSources\n first.\n\n\nAvailability\n\n\nOn Windows and Mac OSX\n\n\nSetVideoSource\n\n\nDeclaration\n\n\nSetVideoSource(index:int, mixSource:int, mixMode:int):int\n\n\nParameters\n\n\n| index:int     | Index of the video source. The index of the video source goes from \n0 - GetNumberOfVideoSources -1\n |\n| mixSource:int | set \n0\n to to set only the first video source. \n1\n to set a second video source |                                   \n\n|               | \n\u2014second video source only available on Microsoft Windows\n |\n| mixMode:int   | when mixSource \n1\n is set, the mix mode to combine two video sources can be chosen here. See available mix modes on page 33. |\n|               | \n\u2014only available on Microsoft Windows\n |\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nSet video source for preview or broadcasting over index. Call \nGetNumberOfVideoSources\n first. The mix source defines the video source you want set. The mixSource and mixMode is optional and only available on Microsoft Windows. There with you can combine two videos over the mixMode.\n\n\nAvailability\n\n\nOn Mac OSX only one video source can use. On Microsoft Windows up to two video sources can be used and be combined in different ways.\n\n\nSetVideoSourceFromURL\n\n\nDeclaration\n\n\nSetVideoSourceFromURL(url:String):int\n\n\nParameters\n\n\n| url:String | URL to use an mp4 file as video source. |\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nURL to an mp4 file source to stream this file.\n\n\nAvailability\n\n\nOnly Supported under Microsoft Windows\n\n\nSetAudioSource\n\n\nDeclaration\n\n\nSetAudioSource(index:int):int\n\n\nParameters\n\n\n| index:int | Index of the audio source. The index of the audio source, from \n0 - GetNumberOfAudioSources -1\n |\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nSet audio source for preview or broadcasting over index. Call \nGetNumberOfAudioSources\n first.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX\n\n\nVideo Properties\n\n\nSetVideoWidth\n\n\nDeclaration\n\n\nSetVideoWidth(width:int, mixSource:int):int\n\n\nParameters\n\n\n| width:int | Width of the video in pixels as integer value |\n| mixSource:int | set \n0\n to to set only the first video source. \n1\n to set a second video source |\n|               | \n\u2014second video source only available on Microsoft Windows\n |\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nSet width of video in pixels. With mixSource the height for two video sources can be set.\n\n\nAvailability\n\n\nSet Width is supported under Mac OS X and Microsoft Windows. The second mix source is only available under Microsoft Windows.\n\n\nSetVideoHeight\n\n\nDeclaration\n\n\nSetVideoHeight(height:int, mixSource:int):int\n\n\nParameters\n\n\n| height:int    | Height of the video in pixels as integer value                                      |\n| mixSource:int | set \n0\n to to set only the first video source. \n1\n to set a second video source |\n|           | \n\u2014second video source only available on Microsoft Windows\n |\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nSet height of video in pixels. With mixSource the height for two video sources can be set.\n\n\nAvailability\n\n\nSet Height is supported under Mac OS X and Microsoft Windows. The second mix source is only available under Microsoft Windows.\n\n\nSetVideoResizeWidth\n\n\nDeclaration\n\n\nSetVideoResizeWidth(width:int, index:int):int\n\n\nParameters\n\n\n\n\n\n\n\n\nwidth:int\n\n\nresize width of the video in pixels as integer value\n\n\n\n\n\n\n\n\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nResize width of video in pixels.\n\n\nAvailability\n\n\nOnly Supported under Microsoft Windows\n\n\nSetVideoResizeHeight\n\n\nDeclaration\n\n\nSetVideoResizeHeight(height:int, index:int):int\n\n\nParameters\n\n\n\n\n\n\n\n\nheight:int\n\n\nresize height of the video in pixels as integer value\n\n\n\n\n\n\n\n\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nResize height of video in pixels.\n\n\nAvailability\n\n\nOnly supported under Microsoft Windows\n\n\nSetVideoFramerate\n\n\nDeclaration\n\n\nSetVideoFramerate(framerate:Number, mixSource:int):int\n\n\nParameters\n\n\n| framerate:Number | Frame rate in frames per Second(FPS) as number value.                               |\n| mixSource:int    | set \n0\n to to set only the first video source. \n1\n to set a second video source |\n|    | \n\u2014second video source only available on Microsoft Windows\n |\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nSet frame rate of video in frames per second (FPS). With mixSource the frame rate for two video sources can be set under Microsoft Windows.\n\n\nAvailability\n\n\nSet video frame rate is supported under Mac OS X and Microsoft Windows. Mix Source is only available under Microsoft Windows.\n\n\n===== SetNumberOfChannels =====\n\n\n=== Declaration ===\n\n\nSetNumberOfChannels(int numOfChannels)\n\n\n=== Parameters ===\n\n\n| numOfChannels:int | Number of channels as int value |\n\n\n=== Description ===\n\n\nSet channel number\n\n\n=== Availability ===\n\n\nOn Mac OSX\n\n\nSetVideoBitrate\n\n\n=== Declaration ===\n\n\nSetVideoBitrate(bitrate:int, index:int):int\n\n\n=== Parameters ===\n\n\n| bitrate:int | Video bitrate as integer value. |\n| index:int   | index of output to set the bitrate for multiple encoders. |                                                      \n\n|              | \n\u2014set different outputs is only available on Microsoft Windows. On Mac OS X the same bitrate is set to all outputs.\n  |\n\n\n=== Return Value ===\n\n\n-\n1\n if call failed\n\n\n=== Description ===\n\n\nSet bitrate of video in kbits per second (kbits/s).\n\n\n=== Availability ===\n\n\nUnder Mac OS X the same bitrate is set to all outputs. Under Microsoft Windows every output can be set to another bitrate.\n\n\nGetVideoBitrate\n\n\n=== Declaration ===\n\n\nGetVideoBitrate(int source)\n\n\n=== Parameters ===\n\n\n| index:int   | index of output to get the bitrate for multiple encoders. |                                                       \n\n|               | \n\u2014get different outputs is only available on Microsoft Windows. On Mac OS X there is only one source available.\n  |\n\n\n=== Return Value ===\n\n\nVideo bitrate as integer value.\n\n\n=== Description ===\n\n\nGet the current video bitrate.\n\n\n=== Availability ===\n\n\nUnder Mac OS X there is only one output available. Under Microsoft Windows several outputs are available over the index parameter.\n\n\nAudio Properties\n\n\nSetAudioBitrate\n\n\n=== Declaration ===\n\n\nSetAudioBitrate(bitrate:int, index:int):int\n\n\n=== Parameters ===\n\n\n| bitrate:int | Audio bitrate as integer value.  |\n| index:int   | index of output to set the bitrate for multiple encoders. |                                                       \n\n|               | \n\u2014set different outputs is only available on Microsoft Windows. On Mac OS X the same bitrate is set to all outputs.\n  |\n\n\n=== Return Value ===\n\n\n-\n1\n if call failed\n\n\n=== Description ===\n\n\nSet bitrate of audio in kbits per second (kbits/s).\n\n\n=== Availability ===\n\n\nUnder Mac OS X the same bitrate is set to all outputs. Under Microsoft Windows every output can be set to another bitrate.\n\n\nGetAudioBitrate\n\n\n=== Declaration ===\n\n\nGetAudioBitrate(int source)\n\n\n=== Parameters ===\n\n\n| index:int   | index of output to get the bitrate for multiple encoders. |                                                       \n\n|               | \n\u2014Get different outputs is only available on Microsoft Windows. On Mac OS X there is only one source available.\n  |\n\n\n=== Return Value ===\n\n\nAudio bitrate as integer value.\n\n\n=== Description ===\n\n\nGet the current audio bitrate.\n\n\nSetAudioSamplerate\n\n\nDeclaration\n\n\nSetAudioSamplerate(samplerate:int):int\n\n\nParameters\n\n\n| samplerate:int | Samplerate of audio as integer value |\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nSet the samplerate of the audio in Hertz (Hz).\n\n\nAvailability\n\n\nUnder Windows and Mac OSX.\n\n\nGetAudioLevel\n\n\nDeclaration\n\n\nGetAudioLevel(channel:int):int\n\n\nParameters\n\n\n| channel:int | channel id as integer. |\n\n\nReturn Value\n\n\nAudiolevel as integer value.\n\n\nDescription\n\n\nGet the audio level of a channel.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX.\n\n\nSetAudioVolume\n\n\nDeclaration\n\n\nSetAudioVolume(volume:int):int\n\n\nParameters\n\n\n| volume:int | volume as integer value |\n\n\nReturn Value\n\n\n-1\n if call failed\n\n\nDescription\n\n\nSet audio volume.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX.\n\n\nSetAudioPreviewVolume\n\n\nDeclaration\n\n\nSetAudioPreviewVolume(volume:int):int\n\n\nParameters\n\n\n| volume:int | volume as integer value |\n\n\nReturn Value\n\n\n-1\n if call failed\n\n\nDescription\n\n\nSet audio volume of preview.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX.\n\n\nColor Management\n\n\nSetColorSpace\n\n\nDeclaration\n\n\nSetColorSpace(index:int, mixSource:int):int\n\n\nParameters\n\n\n| index:int     | index of the input source. |\n| mixSource:int | set \n0\n to to set only the first mixed source. \n1\n to set a second mixed source |\n|       | \n\u2014second mixed source is only available on Microsoft Windows\n |\n\n\nReturn Value\n\n\n-\n1\n if call failed\n\n\nDescription\n\n\nSet the color space of an input source. Only the firtst source is supported under Mac OS X\n\n\nAvailability\n\n\nUnder Windows and Mac OSX.\n\n\nGetNumberOfColorspaces\n\n\nDeclaration\n\n\nGetNumberOfColorspaces(width:int, height:int, mixSource:int):int\n\n\nParameters\n\n\n| width:int     | width of the video source  |\n| height:int    | height of the video source  |\n| mixSource:int | set \n0\n to to get the first mixed source. \n1\n to get the second mixed source |\n|  | \n\u2014second mixed source is only available on Microsoft Windows\n |\n\n\nReturn Value\n\n\nCount of color spaces as integer value.\n\n\nDescription\n\n\nGet the count of color spaces. Get the color space for the specified with and height.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX. Under Mac OSX mix source is not supported.\n\n\nGetColorspace\n\n\nDeclaration\n\n\nGetColorspace(index:int, mixSource:int):String\n\n\nParameters\n\n\n| index:int     | Index of the color spaces. The index of the color spaces, from \n0 - GetNumberOfColorspaces -1\n |\n| mixSource:int | set \n0\n to to get the first mixed source. \n1\n to get the second mixed source |           \n\n|   | \n\u2014second mixed source is only available on Microsoft Windows\n |\n\n\nReturn Value\n\n\ncolor space name as String\n\n\nDescription\n\n\nGet color space name as string. First call \nGetNumberOfColorspaces.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX. Under Mac OSX only the first mix source is supported.\n\n\nResolution \n Frame rate\n\n\nGetNumberOfResolutions\n\n\nDeclaration\n\n\nGetNumberOfResolutions(mixSource:int):int\n\n\nParameters\n\n\n| mixSource:int | set \n0\n to to get the first mixed source. \n1\n to get the second mixed source |\n|                 | \n\u2014second mixed source is only available on Microsoft Windows\n |\n\n\nReturn Value\n\n\nCount of resolutions as integer value.\n\n\nDescription\n\n\nGet count of resolutions.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX. Under Mac OSX only the first mix source is supported.\n\n\nGetResolution\n\n\nDeclaration\n\n\nGetResolution(index:int, mixSource:int):Object\n\n\nParameters\n\n\n| index:int     | Index of the resolutions. The index of the resolutions, from \n0 - GetNumberOfResolutions -1\n |\n| mixSource:int | set \n0\n to to get the first mixed source. \n1\n to get the second mixed source  |           \n\n|                    | \n\u2014second mixed source is only available on Microsoft Windows\n |\n\n\nReturn Value\n\n\nGet resolution of video source. First call \nGetNumberOfResolutions.\n\n\nDescription\n\n\nGet count of resolutions.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX. Under Mac OSX only the first mix source is supported.\n\n\nGetNumberOfFramerates\n\n\nDeclaration\n\n\nGetNumberOfFramerates(width:int, height:int, colorspace:String, mixSource:int):int\n\n\nParameters\n\n\n| width:int         | width of the video source  |\n| height:int        | height of the video source.                                                      |\n| colorspace:String | name of the color space get from GetColorspace                                   |\n| mixSource:int     | set \n0\n to to get the first mixed source. \n1\n to get the second mixed source |\n|        | \n\u2014second mixed source is only available on Microsoft Windows\n |\n\n\nReturn Value\n\n\nCount of available frame rates as integer value.\n\n\nDescription\n\n\nGet count of available frame rates.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX. Under Mac OSX only the first mix source is supported.\n\n\nGetFramerate\n\n\nDeclaration\n\n\nGetFramerate(index:int, mixSource:int):Number\n\n\nParameters\n\n\n| index:int     | Index of the frame rate. The index of the frame rate, from \n0 - GetNumberOfFramerates -1\n |\n| mixSource:int | set \n0\n to to get the first mixed source. \n1\n to get the second mixed source  |        \n\n|     | \n\u2014second mixed source is only available on Microsoft Windows\n |\n\n\nReturn Value\n\n\nFrame rate (FPS) as number value.\n\n\nDescription\n\n\nGet the frame rate of a video source. Call \nGetNumberOfFramerates\n first.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX. Under Mac OSX only the first mix source is supported.\n\n\nSetDeinterlacing\n\n\nDeclaration\n\n\nSetDeinterlacing(mode:int, method:int):int\n\n\nParameters\n\n\n| mode:int   | possible values: \n0\n=off, \n1\n=auto, \n2\n=on   \\  no auto mode for mac |\n| method:int | possible values: \n0\n=duplicate field/bob, \n1\n=blend, \n2\n=vertical filter, \n3\n=edge, 4=median, \n5\n=median2 |\n\n\nReturn Value\n\n\n-1\n if call failed\n\n\nDescription\n\n\nSet deinterlacing mode and method.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX.\n\n\nOutputs\n\n\nGetNumberOfOutputs\n\n\nDeclaration\n\n\nGetNumberOfOutputs():int\n\n\nReturn Value\n\n\nCount of outputs as integer value.\n\n\nDescription\n\n\nGet count of outputs.\n\n\nAvailability\n\n\nOnly Supported under Microsoft Windows.\n\n\nAddOutput\n\n\nDeclaration\n\n\nAddOutput(url:String):int\n\n\nParameters\n\n\n| url:String | Url of outputs can be a local mp4 recording or a rtmp source. |\n\n\nReturn Value\n\n\n-1\n if call failed\n\n\nDescription\n\n\nAdd new output source with url.\n\n\nAvailability\n\n\nOnly Supported under Microsoft Windows.\n\n\nSetOutputUrl\n\n\nDeclaration\n\n\nSetOutputUrl(url:String, index:int):int\n\n\nParameters\n\n\n| url:String | Url of outputs can be a local mp4 recording or a rtmp server. |\n| index:int  | Index of the output.                                          |\n\n\nReturn Value\n\n\n-1\n if call failed\n\n\nDescription\n\n\nSet output with url. A local mp4 recording or a rtmp server.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX.\n\n\nGetOutputUrl\n\n\nGetNumberOfOutputUrls\n\n\nAcceptDataInSampleBuffer\n\n\nSetFilesourceFilename\n\n\nDeclaration\n\n\nSetFilesourceFilename(url:String):int\n\n\nParameters\n\n\n| url:String | Url to the local file |\n\n\nReturn Value\n\n\n-1\n if call failed\n\n\nDescription\n\n\nSet the filename of a local source.\n\n\nAvailability\n\n\nOnly Supported under Microsoft Windows.\n\n\nClearOutputs\n\n\nDeclaration\n\n\nClearOutputs():int\n\n\nReturn Value\n\n\n-1\n if call failed\n\n\nDescription\n\n\nReset all outputs except the first one.\n\n\nAvailability\n\n\nOnly Supported under Microsoft Windows.\n\n\nVideo Special\n\n\nSetVideoEffect\n\n\nDeclaration\n\n\nSetVideoEffect(mode:int):int\n\n\nParameters\n\n\n| mode:int | Mode of video effect. See possible overlay effects on page 33 |\n\n\nReturn Value\n\n\n-1\n if call failed\n\n\nDescription\n\n\nAdd a video effect. For overlay.\n\n\nAvailability\n\n\nOnly Supported under Microsoft Windows.\n\n\nSetOverlay\n\n\nDeclaration\n\n\nSetOverlay(url:String):int\n\n\nParameters\n\n\n| url:String | Url of the overlay source. Can be a locale path or server url to a png or txt file. Also can be a txt string. |\n\n\nReturn Value\n\n\n-1\n if call failed\n\n\nDescription\n\n\nAdd a overlay to the video.\n\n\nAvailability\n\n\nOnly Supported under Microsoft Windows.\n\n\nShowPropertyPage\n\n\nDeclaration\n\n\nShowPropertyPage(value:int):int\n\n\nParameters\n\n\n| value:int | \n1\n or \n0\n are possible values |\n\n\nReturn Value\n\n\n-1\n if call failed\n\n\nDescription\n\n\nShow property page. Only used for Blackmagic devices.\n\n\nAvailability\n\n\nOnly supported under Microsoft Windows.\n\n\nLogging\n\n\nSetLog\n\n\nDeclaration\n\n\nSetLog(logFile:String, logLevel:int):int\n\n\nParameters\n\n\n\n\n\n\n\n\nlogFile:String\n\n\nlocal path for logfile as string.\n\n\n\n\n\n\n\n\n\n\nReturn Value\n\n\n-1\n if call failed\n\n\nDescription\n\n\nSet log file path and log level.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX.\n\n\nSetXmlProfile\n\n\ndispose\n\n\nDeclaration\n\n\ndispose():void\n\n\nDescription\n\n\nDestructor.\n\n\nAvailability\n\n\nUnder Windows and Mac OSX.\n\n\nSetConfig Properties\n\n\n| \nProperty name\n               | \nDescription\n                                                                                                              | \nValues\n                                                                                                                                               |  Mac Platform Support  | \n| license                                 | License string                                                                                                              |                                                                                                                                                                |                  \u2714                          |\n| XMLPath                              | Path to the XML file with configuration information                                                      |                                                                                                                                                                |                  \u2714                          |\n| RemoteControlPort              | Port number                                                                                                                 |                                                                                                                                                                |                  \u2714                          |\n| LiveSource                           |                                                                                                                                     |                                                                                                                                                               |                  \u2714                          |\n| RemoteIP                             |                                                                                                                                     |                                                                                                                                                               |                  \u2714                          |\n| AVOffsetMs              |                                                           |                                                                                                                                                                                                                                                     |                  \u2714                          |\n| ReconnectPeriod/ReconnectInterval              |                                                           |                                                                                                                                                                                                               |                  \u2714                          |\n| ReconnectAttempts              | Auto Reconnect No. of Attempts  | 5                                                                                                                                                                                                                                           |                  \u2714                          | \n| UseInternalReconnect              | Use RTMP Internal Reconnect of the RTMP Filter (do not stop encoder on network errors)  | 0 / 1                                                                                                                                          |                  \u2714                          |\n| UseUnlimitedReconnect              | Don't stop reconnecting after a specific number of failed attempts (encoder is not stopped)  | 0 / 1                                                                                                                                   |                  \u2714                          |\n| Auth              |  Authentication for RTMP and RTSP Push streaming                                                         | \u201cuser:password\u201d                                                                                                                                                      |                  \u2714                          | \n| RtmpUrlDelimiter              | Set delimiter for RTMP-url and streamname.                                                          | Example: \u201d+\u201c will split \n so that \u201cmyStream\u201d is the stream name.                   |                  \u2714                          | \n| DeinterlacingMode              | Deinterlacing Mode                                                          | 0=off, 1=auto (default), 2=on Note: for some capture devices you need to set this to \u201eon\u201c (2). (Resolutions 480i, 576i, 1080i)             |                  \u2714                          |\n| DeinterlacingMethod              | Deinterlacing Method                                                           | 0=duplicate field/bob, 1=blend, 2=vertical filter, 3=edge, 4=median, 5=median2                                                                          |                  \u2714                          |\n| RemoteSendAudioLevelInterval              |                                                           |                                                                                                                                                                                                                        |                  \u2714                          |\n| CaptureRegion              | Capture Region of the input source, example for a input resolution of 640\u00d7480: SetConfig(\u201cCaptureRegion\u201d, \u201c10,630,10,470\u201d) - discards 10 pixels on each side | left,right,top,bottom                    |                  \u2714                          |\n| RTMPPublishMode              | RTMP Publish/Live/Record on Server (VOD)                                                          | 1=record, 2=append, 0=live (default)                                                                                                             |                  \u2714                          | \n| VideoAudioInput              |                                                           |                                                                                                                                                                                                                                             |                  \u2714                          | \n| PreviewNoInvert              |                                                           |                                                                                                                                                                                                                                             |                  \u2714                          |\n| ScreenCapMode              | Screen Capture Desktop Mode                                                          | 0=Screen, 1=FollowMouse, 2=Region relative, 3=Region absolute, 4=Window, 5=Window overlapping                               |                  \u2714                          | \n| ScreenCapWindowIndex              |                                                           |                                                                                                                                                                                                                                   |                  \u2714                          | \n| ApplyDynamicSettings              |                                                           |                                                                                                                                                                                                                                       |                  \u2714                          | \n| Mp4RecordOnTheFlyChangeName |                                                                                                     |                                                                                                                                                                                        |        \u2714          | \n| Mp4RecordOnTheFlyControl    | If Mp4RecordOnTheFly is enabled, controls start/stop recording        | 0=stop, 1=start                                                                                                                                                               |        \u2714          | \n| AudioPreview                | Enables audio preview during preview or broadcast                                       | 0=no preview, 1=visual preview (default, requires filter AudioVolume), 2=visual and audible preview, 3=audible preview  |       \u2714          | \n| Mp4RecordOnTheFly           | Enables start/stop recording to local file while the broadcast is running  | 0=off (default), 1=on                                                                                                                                                        |      \u2714           | \n| H264Quality                 | H.264 Encoder Quality/Speed Ratio                                                                 | 0=worst/fastest 1=default 6=highest/slowest                                                                                                                 |      \u2714           | \n| H264IFrameDistance              | H.264 I Frame / GOP Length in Frames (100 Frames = 4 seconds for 25 fps)   | 100=default, 1 = I-Frame-Only                                                                                                                              |                  \u2714                          |\n| H264PFrameDistance             | H.264 P/B Frame Distance                                                                   | 3 1 = IP-Only (no B-Frames)                                                                                                                                             |                  \u2714                          | \n| H264Profile              | H.264 Encoding Profile                                                          | Baseline, Main, Extended, High Most compatible but lowest quality is Baseline, (no B-Frames, no CABAC VLC)                                           |                  \u2714                          | \n| H264Level              | H.264 Level                                                           | 10=1.0, 11=1.1, 12=1.2, 13=1.3, 20=2.0, 21=2.1, 22=2.2, 30=3.0, 31=3.1, 32=3.2, 40=4.0, 41=4.1, 42=4.2, 50=5.0, 51=5.1                                         |                  \u2714                          |\n| H264VlcMode              | H.264 VLC Mode (CAVLC/CABAC)                                                          | =CAVLC, 2=CABAC (not allowed in H.264 Baseline Profile)                                                                                                     |                  \u2714                          |\n| OutputFrameRate             | Video Output (Encoded) Frame Rate                                                           | 5,10,15,20,25,30, OR 23980 OR 29970                                                                                                                          |       \u2714          | \n| RTMPWriteTimecode           | Send timecodes in RTMP streams, If enabled RTMP timecodes are sent in addition to the always sent RTMP packet timestamps | 0=off (default), 1=on                                                                 |      \u2714           |\n| UseSystemTimeAsTimecode              | Send RTMP/MP4 timecodes as UTC system date time or stream time                                                          | 0=stream time (default), 1=UTC system date time                                       |                  \u2714                          | \n| TimecodeInterval            | RTMP/MP4 timecode interval in milliseconds                                                | Should be higher or equal to 1000 (1s)                                                                                                                          |        \u2714         |\n| TcpConnectTimeout              |                                                           |                                                                                                                                                                                                                                             |                  \u2714                          | \n| RTSPSinkMode              | Determines if the RTSPSink is running as a server (passive/pull) or as a streamer to a RTSP push capable server (active/push) | 1=server/pull (default), 2=streamer/push                                            |                  \u2714                          |\n\n| RTSPSDPFileFolder              |                                                           |                                                                                                                                                                                                                                             |                  \u2714                          | \n| RTSPStreamDescription              |                                                           |                                                                                                                                                                                                                                             |                  \u2714                          |\n| AudioVolumePerSoftware              | Control volume with the Audio Volume Filter                                                          | 0=off (default), 1=on                                                                                                                                                                                                                                             |                  \u2714                          | \n| AVFShowBlackmagicDevices    | use AVFoundation for BlackMagic devices                                                                                                                                 | 0=off (default), 1=on                                                                 |       \u2714          |\n| OverlayRect                 | Sets the dimensions for a given overlay-image.  | \u201cindex,left,top,right,bottom\u201d. index: the overlay-index, beginning with 0. left, top, right and bottom define a rectangle in screen-coordinates.           |        \u2714         |\n| OverlayAlpha                | Sets the alpha-value for overlays.   | Range: 0-1. 0.0 (not visable), 1 (fully visable).                                                                                                                                                                                 |       \u2714          |\n| OverlayTextColor            | Text Overlay Color | Must be a hexadecimal color-value in BGR-format, e.g.: \u201c0000FF\u201d (255 (0x0000FF) - red)                                                                                                                                     |       \u2714          | \n| OverlayBackgroundColor      |                         | Must be a hexadecimal color-value in BGR-format, e.g.: \u201c000000\u201d (0 (0x000000) - black).                                                                                                                                   |       \u2714          | \n| OverlaySkipColor            | Setting skipcolor to a specific value will result in this color to be rendered transparent in the overlays.              | Example: If OverlayBackgroundColor was set to blue (\u201cFF0000\u201d) setting OverlaySkipColor to blue as well will result in a transparent background. Parameter must be a hexadecimal color-value in BGR-format, e.g.: \u201cFF0000\u201d (blue). Disable: Setting OverlaySkipColor to \u201cFF000000\u201d (ABGR) will disable the usage of skipcolor.                                                                                                                                                 |       \u2714          | \n| AudioDelay                  | Streaming Audio Delay / Offset (ms) |                                                                                                                                                                                                                                                      |        \u2714         |\n| ShowPropertyPageForDevice   | Calls the propertypage for a given device.                                                                               | 0 for device with index: 0                                                                                                         |         \u2714        |\n| UseQuicktimeH264Encoder              |                                                           |                                                                                                                                                                                                                               |                  \u2714                          | \n| RotateDegrees              | set the degrees by which video should be rotated, only works if UseRotation is set to on, set before StartPreview or StartBroadcast | 0/90/180/270                                                                           |                  \u2714                          |\n\n\nMixmode\n\n\nNO_MIXING = 0 (if video mixing is not used)\n\n\nLEFT_RIGHT_FULL = 1\n\n\nLEFT_RIGHT_HALF = 2\n\n\nTOP_BOTTOM = 3\n\n\nINTERLACED_LINES = 4\n\n\nINTERLACED_COLUMN = 5\n\n\nANAGLYPH = 6\n\n\nPIC_IN_PIC_LEFT_TOP = 7\n\n\nPIC_IN_PIC_RIGHT_TOP = 8\n\n\nPIC_IN_PIC_LEFT_BOTTOM = 9\n\n\nPIC_IN_PIC_RIGHT_BOTTOM = 10\n\n\nVIDEO1_ONLY = 11\n\n\nVIDEO2_ONLY = 12\n\n\nREGION = 13\n\n\nMAX = 14\n\n\nOverlay Effects\n\n\nOverlay off = 0\n\n\nLeft Top = 1\n\n\nRight Top = 2\n\n\nLeft Bottom = 3\n\n\nRight bottom = 4\n\n\nFree Postion = 5", 
            "title": "macos api"
        }, 
        {
            "location": "/nanostream-macos-sdk/#nanostream-macos-api", 
            "text": "", 
            "title": "nanoStream MacOS API"
        }, 
        {
            "location": "/nanostream-macos-sdk/#intro", 
            "text": "The nanoStream MacOS dylib API is a video capture and encoding software for streaming live video and audio to internet based media servers and other network clients.  The nanoStream MacOS dylib API supports internet broadcast streaming and local recording at the same time. A lots of video devices are supported, also Blackmagic devices. The resolution, frame rate, samplerate and more can be manipulated. For a full feature list and platform specific features look at the method list below.  It works perfectly together with internet streaming servers like Wowza Media Server and Flash Media Server, streaming to Mobile devices like iPhone, Silverlight and other playback clients is possible.   Note: this is preliminary documentation, please contact us for further information or help.", 
            "title": "Intro"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setup", 
            "text": "The best way to start is using the C++ sample code included in the SDK.", 
            "title": "Setup:"
        }, 
        {
            "location": "/nanostream-macos-sdk/#system-requirements", 
            "text": "Mac OSX 10.9 or newer, Windows 7 or newer  Hardware Requirements:  Intel Core2 Duo or later  Recommended for HD capture: Intel Core i7 or Xeon  |  Method Name              |  Description                                      | libnanoStream.dylib Support | Mac Plugin Support | Mac Framework Support | ANE Support|\n| InitPlugin              | Initialization of the Plugin.                               |  nanoStream  |  initEncoder  |  init  |  \u2714  |\n| SetXml                  | deprecated - no functionality                          |  \u2718  |  \u2718  |  \u2718  |  \u2714  |\n| GetVersion              | Get version number of the SDK                                                                     |   \u2714  |    |    |  |\n| SetLicense              | Set license for nano SDK                               |  \u2714  |  \u2714  |  \u2714   |  \u2714  |\n| GetLicense              | Get the current license of the SDK                                                                     |  \u2714  |    |    |  |\n| SetConfig               | Set property over Identifier.                            |  \u2714  |  \u2714  |  \u2714  |  \u2714  |\n| UpdatePreviewDimensions | Update preview dimensions of the bmp           |  \u2718  |  \u2718   |  \u2718   |  \u2714  |\n| GetPreviewDimensions              | Get the current preview dimensions                                                                      |  \u2714   |    |    |  |\n| GetPreviewImage              | Get the preview image                                                                     |  \u2714  |    |    |  |\n| GetPreviewFrame         | Get current preview Frame                       |  \u2718  |  \u2718  |  \u2718  |  \u2714  |\n| StartPreview            | Start the preview.                              |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| StopPreview             | Stop the preview.                              |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| StartBroadcast          | Start broadcasting.                             |  \u2714  |  \u2714  |  startStream  |  \u2714  |\n| StopBroadcast           | Stop broadcasting.                              |  \u2714  |  \u2714  |  stopStream  |  \u2714  |\n| GetNumberOfVideoSources | Count video sources with current settings       |  \u2714  |  \u2714  |  \u2714  |  \u2714  |\n| GetNumberOfAudioSources | Count audio sources with current settings      |  \u2714   |  \u2714  |  \u2714  |  \u2714  |\n| GetVideoSource          | Get name of the video source as string.         |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| GetAudioSource          | Get name of the audio source as string.         |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| SetVideoSource          | Set video source for preview or broadcasting    |  \u2714  |  VideoSource  |  \u2718   |  \u2714  |\n| SetVideoSourceFromURL   | URL to an mp4 file source or ramp source        |  \u2718  |  \u2718  |  \u2718  |  \u2714  |\n| SetAudioSource          | Set audio source for preview or broadcasting    |  \u2714  |  AudioSource  |  \u2718  |  \u2714  |\n| SetVideoWidth           | Set width of video in pixels                   |  \u2714  |  VideoWidth  |  \u2714  |  \u2714  |\n| GetVideoWidth           | Get width of video in pixels                   |  \u2714  |  VideoWidth  |    |    |\n| SetVideoHeight          | Set height of video in pixels                   |  \u2714  |  VideoHeight  |  \u2714  |  \u2714  |\n| GetVideoHeight          | Get height of video in pixels                   |  \u2714  |  VideoHeight  |   |   |\n| SetVideoResizeWidth     | Resize width of video in pixels                |  \u2718   |  \u2714  |  \u2718  |  \u2714  |\n| SetVideoResizeHeight    | Resize height of video in pixels               |  \u2718  |  \u2714  |  \u2718  |  \u2714  |\n| SetVideoFramerate       | Set frame rate of video in frames per second    |  SetFramerate   |  VideoFrameRate  |  setFrameRate  |  \u2714  |\n| SetNumberOfChannels              | set channel number                                                                      |  \u2714   |    |    |  |\n| SetVideoBitrate         | Set bitrate of video in kbits per second        |  \u2714  |  \u2714  |  \u2714   |  \u2714  |\n| GetVideoBitrate              | Get the current video bitrate                                                                     |  \u2714  |    |    |  |\n| SetAudioBitrate         | Set bitrate of audio in kbits per second       |  \u2714  |  \u2714  |  \u2714  |  \u2714  |\n| GetAudioBitrate              | Get the current audio bitrate                                                                     |  \u2714   |    |    |  |\n| SetAudioSamplerate      | Set the samplerate of the audio in Hertz        |  \u2714  |  \u2718  |  setSampleRate   |  \u2714  |\n| GetAudioLevel           | Get the audio level of a channel                |  \u2714  |  \u2714  |  \u2714   |  \u2714  |\n| SetAudioVolume          | Set audio volume                               |  \u2714  |  AudioVolume  |  \u2718  |  \u2714  |\n| SetAudioPreviewVolume   | Set audio volume of preview                    |  \u2714  |  AudioPreviewVolume  |  \u2718  |  \u2714  |\n| SetColorSpace           | Set the color space of an input source         |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| GetNumberOfColorspaces  | Get the count of color spaces                  |  \u2714  |  \u2714  |  \u2718  |  \u2714  |\n| GetColorspace           | Get color space name as string                  |  \u2714  |  \u2714  |  \u2714  |  \u2714  |\n| GetNumberOfResolutions  | Get count of available resolutions             |  \u2714   |  \u2714  |  \u2718  |  \u2714  |\n| GetResolution           | Get count of resolutions                       |  \u2714   |  \u2714  |  \u2718  |  \u2714  |\n| GetNumberOfFramerates   | Count of available frame rates as integer value |  GetNumberOfFrameRates  |  \u2714  |  \u2718  |  \u2714  |\n| GetFramerate            | Get the frame rate of a video source           |  \u2714   |  \u2714  |  getFrameRate  |  \u2714  |\n| SetDeinterlacing        | Set deinterlacing mode and method              |  \u2718   |  \u2718  |  \u2718  |  \u2714  |\n| GetNumberOfOutputs      | Get count of output sources                    |  \u2718  |  \u2714  |  \u2718  |  \u2714  |\n| AddOutput               | Add new output source with url                 |  \u2718   |  \u2714  |  \u2718  |  \u2714  |\n| SetOutputUrl            | Set output source with url. Local or rtmp       |  \u2714   |  \u2714  |  setOutputUrl   |  \u2714  |\n| GetOutputUrl              |                                                                      |  \u2714  |    |    |  |\n| GetNumberOfOutputUrls              |                                                                      |  \u2714  |    |    |  |\n| AcceptDataInSampleBuffer              |                                                                      |  \u2714   |    |    |  |\n| AddSampleBuffer              |                                                                      |  \u2714  |    |    |  |\n| SetFilesourceFilename   | Set the filename of a local source            |  \u2718   |  \u2718  |  \u2718  |  \u2714  |\n| ClearOutputs            | Reset all output sources                      |   \u2718   |  \u2714  |  \u2718  |  \u2714  |\n| SetVideoEffect          | Add a video effect.                            |  \u2718   |  \u2714  |  \u2718  |  \u2714  |\n| SetOverlay              | Add a overlay to the video                     |   \u2718   |  \u2718  |  \u2718  |  \u2714  |\n| ShowPropertyPage        | Show property page                            |   \u2718    |  \u2714  |  \u2718   |  \u2714  |\n| SetLog                  | Set log file path and log level.               |  \u2714  |  \u2714  |  \u2714  |  \u2714  |\n| SetXmlProfile              |                                                                      |  \u2714   |    |    |  |\n| dispose():void          | Reset buffer                                  |  \u2718   |  \u2718  |  \u2718  |  \u2714  |", 
            "title": "System Requirements:"
        }, 
        {
            "location": "/nanostream-macos-sdk/#method-description", 
            "text": "===== Setup the Plugin =====  ==== InitPlugin ====  === Declaration ===  InitPlugin(xmlPath:String):int  === Parameters ===     xmlPath:String  Path to the xml file with configuration information, can be local or a url.      === Return Value ===  -1  if the initialization failed  === Description ===  Initialization of the plugin.  === Availability ===  On Windows and Mac OSX  ==== GetVersion ====  === Declaration ===  GetVersion()  === Return Value ===  Version number as int value  === Description ===  Return the version number of the SDK as int value  === Availability ===  On Mac OSX\n==== SetLicense ====  === Declaration ===  SetLicense(licenseStr:String):int  === Parameters ===  | licenseStr:String | License String getting from nano. |  === Return Value ===  - 1  if call failed  === Description ===  Set license for nano SDK  === Availability ===  On Windows and Mac OSX  ==== GetLicense ====  === Declaration ===  GetLicense()  === Return Value ===  String represantation of the license  === Description ===  Get license for nano SDK  === Availability ===  On Mac OSX", 
            "title": "Method Description:"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setconfig", 
            "text": "Declaration  SetConfig(property:String, value:String):int  Parameters  | property:String | Property identifier as string. See property list for configuration on page 32. |\n| value:String    | Value for property as string representation.                                   |  Return Value  1  if call was successful,  0  otherwise  Description  Set property over Identifier.  Availability  On Windows and Mac OSX", 
            "title": "SetConfig"
        }, 
        {
            "location": "/nanostream-macos-sdk/#preview", 
            "text": "", 
            "title": "Preview"
        }, 
        {
            "location": "/nanostream-macos-sdk/#updatepreviewdimensions", 
            "text": "Declaration  UpdatePreviewDimensions():void  Description  Updates the preview with the current width and height.  Availability  On Windows and Mac OSX", 
            "title": "UpdatePreviewDimensions"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getpreviewdimensions", 
            "text": "=== Declaration ===  GetPreviewDimensions(long  width, long  height, long *size)  === Parameters ===  | width:long | Pointer to return the video width |\n| height:long | Pointer to return the video height |\n| size:long | Pointer to return the video size |  === Return Value ===  1  if call failed,  0  otherwise  === Description ===  Get the current preview dimensions.", 
            "title": "GetPreviewDimensions"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getpreviewimage", 
            "text": "=== Declaration ===  GetPreviewImage(char *pixelBuffer, int size)  === Parameters ===  | pixelBuffer:char | pixel buffer|\n| size:int | size |  === Return Value ===  1  if call failed,  0  otherwise  === Description ===  Get the preview image.", 
            "title": "GetPreviewImage"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getpreviewframe", 
            "text": "=== Declaration ===  GetPreviewFrame(options:int = GET_FRAME_BITMAP):Boolean  === Parameters ===  | options:int | option as integer. Default is GET_FRAME_BITMAP = 2. A\\  Also possible: \\  GET_FRAME_RAW_BYTES:int = 4,\\  GET_POWER_OF_2_FRAME_BGRA_BYTES:int = 8 |  === Return Value ===  True if new frame was received otherwise false  === Description ===  Get current preview Frame.", 
            "title": "GetPreviewFrame"
        }, 
        {
            "location": "/nanostream-macos-sdk/#startpreview", 
            "text": "Declaration  StartPreview():int  Return Value  - 1  if call failed  Description  Start the preview.  Availability  On Windows and Mac OSX", 
            "title": "StartPreview"
        }, 
        {
            "location": "/nanostream-macos-sdk/#stoppreview", 
            "text": "Declaration  StopPreview():int  Return Value  - 1  if call failed  Description  Stop the preview.  Availability  On Windows and Mac OSX", 
            "title": "StopPreview"
        }, 
        {
            "location": "/nanostream-macos-sdk/#broadcast", 
            "text": "", 
            "title": "Broadcast"
        }, 
        {
            "location": "/nanostream-macos-sdk/#startbroadcast", 
            "text": "Declaration  StartBroadcast():int  Return Value  ERROR_SETUP_ENCODER_FAILED = -2  ERROR_RTMP_OUTPUT_SOURCE1_FAILED = 2  ERROR_RTMP_OUTPUT_SOURCE2_FAILED = 3  Description  Start broadcasting.  Availability  On Windows and Mac OSX", 
            "title": "StartBroadcast"
        }, 
        {
            "location": "/nanostream-macos-sdk/#stopbroadcast", 
            "text": "Declaration  StopBroadcast():int  Return Value  - 1  if call failed  Description  Stop broadcasting.  Availability  On Windows and Mac OSX", 
            "title": "StopBroadcast"
        }, 
        {
            "location": "/nanostream-macos-sdk/#video-source-audio-source-handling", 
            "text": "", 
            "title": "Video Source &amp; Audio Source handling"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getnumberofvideosources", 
            "text": "Declaration  GetNumberOfVideoSources():int  Return Value  Count of all available video sources.  Description  Count of all available video sources with current settings  Availability  On Windows and Mac OSX", 
            "title": "GetNumberOfVideoSources"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getnumberofaudiosources", 
            "text": "Declaration  GetNumberOfAudioSources():int  Return Value  Count of all available audio sources.  Description  Count of all available audio sources with current settings  Availability  On Windows and Mac OSX", 
            "title": "GetNumberOfAudioSources"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getvideosource", 
            "text": "Declaration  GetVideoSource(index:int):String  Parameters  | index:int | Index of the video source. The index of the video source, from  0 - GetNumberOfVideoSources -1  |  Return Value  Video source name as string.  Description  Get name of the video source as string. Call  GetNumberOfVideoSources  first.  Availability  On Windows and Mac OSX", 
            "title": "GetVideoSource"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getaudiosource", 
            "text": "Declaration  GetAudioSource(index:int):String  Parameters  | index:int | Index of the audio source. The index of the audio source, from  0 - GetNumberOfAudioSources -1  |  Return Value  Audio source name as string.  Description  Get name of the audio source as string. Call  GetNumberOfAudioSources  first.  Availability  On Windows and Mac OSX", 
            "title": "GetAudioSource"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setvideosource", 
            "text": "Declaration  SetVideoSource(index:int, mixSource:int, mixMode:int):int  Parameters  | index:int     | Index of the video source. The index of the video source goes from  0 - GetNumberOfVideoSources -1  |\n| mixSource:int | set  0  to to set only the first video source.  1  to set a second video source |                                    \n|               |  \u2014second video source only available on Microsoft Windows  |\n| mixMode:int   | when mixSource  1  is set, the mix mode to combine two video sources can be chosen here. See available mix modes on page 33. |\n|               |  \u2014only available on Microsoft Windows  |  Return Value  - 1  if call failed  Description  Set video source for preview or broadcasting over index. Call  GetNumberOfVideoSources  first. The mix source defines the video source you want set. The mixSource and mixMode is optional and only available on Microsoft Windows. There with you can combine two videos over the mixMode.  Availability  On Mac OSX only one video source can use. On Microsoft Windows up to two video sources can be used and be combined in different ways.", 
            "title": "SetVideoSource"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setvideosourcefromurl", 
            "text": "Declaration  SetVideoSourceFromURL(url:String):int  Parameters  | url:String | URL to use an mp4 file as video source. |  Return Value  - 1  if call failed  Description  URL to an mp4 file source to stream this file.  Availability  Only Supported under Microsoft Windows", 
            "title": "SetVideoSourceFromURL"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setaudiosource", 
            "text": "Declaration  SetAudioSource(index:int):int  Parameters  | index:int | Index of the audio source. The index of the audio source, from  0 - GetNumberOfAudioSources -1  |  Return Value  - 1  if call failed  Description  Set audio source for preview or broadcasting over index. Call  GetNumberOfAudioSources  first.  Availability  Under Windows and Mac OSX", 
            "title": "SetAudioSource"
        }, 
        {
            "location": "/nanostream-macos-sdk/#video-properties", 
            "text": "", 
            "title": "Video Properties"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setvideowidth", 
            "text": "Declaration  SetVideoWidth(width:int, mixSource:int):int  Parameters  | width:int | Width of the video in pixels as integer value |\n| mixSource:int | set  0  to to set only the first video source.  1  to set a second video source |\n|               |  \u2014second video source only available on Microsoft Windows  |  Return Value  - 1  if call failed  Description  Set width of video in pixels. With mixSource the height for two video sources can be set.  Availability  Set Width is supported under Mac OS X and Microsoft Windows. The second mix source is only available under Microsoft Windows.", 
            "title": "SetVideoWidth"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setvideoheight", 
            "text": "Declaration  SetVideoHeight(height:int, mixSource:int):int  Parameters  | height:int    | Height of the video in pixels as integer value                                      |\n| mixSource:int | set  0  to to set only the first video source.  1  to set a second video source |\n|           |  \u2014second video source only available on Microsoft Windows  |  Return Value  - 1  if call failed  Description  Set height of video in pixels. With mixSource the height for two video sources can be set.  Availability  Set Height is supported under Mac OS X and Microsoft Windows. The second mix source is only available under Microsoft Windows.", 
            "title": "SetVideoHeight"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setvideoresizewidth", 
            "text": "Declaration  SetVideoResizeWidth(width:int, index:int):int  Parameters     width:int  resize width of the video in pixels as integer value      Return Value  - 1  if call failed  Description  Resize width of video in pixels.  Availability  Only Supported under Microsoft Windows", 
            "title": "SetVideoResizeWidth"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setvideoresizeheight", 
            "text": "Declaration  SetVideoResizeHeight(height:int, index:int):int  Parameters     height:int  resize height of the video in pixels as integer value      Return Value  - 1  if call failed  Description  Resize height of video in pixels.  Availability  Only supported under Microsoft Windows", 
            "title": "SetVideoResizeHeight"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setvideoframerate", 
            "text": "Declaration  SetVideoFramerate(framerate:Number, mixSource:int):int  Parameters  | framerate:Number | Frame rate in frames per Second(FPS) as number value.                               |\n| mixSource:int    | set  0  to to set only the first video source.  1  to set a second video source |\n|    |  \u2014second video source only available on Microsoft Windows  |  Return Value  - 1  if call failed  Description  Set frame rate of video in frames per second (FPS). With mixSource the frame rate for two video sources can be set under Microsoft Windows.  Availability  Set video frame rate is supported under Mac OS X and Microsoft Windows. Mix Source is only available under Microsoft Windows.  ===== SetNumberOfChannels =====  === Declaration ===  SetNumberOfChannels(int numOfChannels)  === Parameters ===  | numOfChannels:int | Number of channels as int value |  === Description ===  Set channel number  === Availability ===  On Mac OSX", 
            "title": "SetVideoFramerate"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setvideobitrate", 
            "text": "=== Declaration ===  SetVideoBitrate(bitrate:int, index:int):int  === Parameters ===  | bitrate:int | Video bitrate as integer value. |\n| index:int   | index of output to set the bitrate for multiple encoders. |                                                       \n|              |  \u2014set different outputs is only available on Microsoft Windows. On Mac OS X the same bitrate is set to all outputs.   |  === Return Value ===  - 1  if call failed  === Description ===  Set bitrate of video in kbits per second (kbits/s).  === Availability ===  Under Mac OS X the same bitrate is set to all outputs. Under Microsoft Windows every output can be set to another bitrate.", 
            "title": "SetVideoBitrate"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getvideobitrate", 
            "text": "=== Declaration ===  GetVideoBitrate(int source)  === Parameters ===  | index:int   | index of output to get the bitrate for multiple encoders. |                                                        \n|               |  \u2014get different outputs is only available on Microsoft Windows. On Mac OS X there is only one source available.   |  === Return Value ===  Video bitrate as integer value.  === Description ===  Get the current video bitrate.  === Availability ===  Under Mac OS X there is only one output available. Under Microsoft Windows several outputs are available over the index parameter.", 
            "title": "GetVideoBitrate"
        }, 
        {
            "location": "/nanostream-macos-sdk/#audio-properties", 
            "text": "", 
            "title": "Audio Properties"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setaudiobitrate", 
            "text": "=== Declaration ===  SetAudioBitrate(bitrate:int, index:int):int  === Parameters ===  | bitrate:int | Audio bitrate as integer value.  |\n| index:int   | index of output to set the bitrate for multiple encoders. |                                                        \n|               |  \u2014set different outputs is only available on Microsoft Windows. On Mac OS X the same bitrate is set to all outputs.   |  === Return Value ===  - 1  if call failed  === Description ===  Set bitrate of audio in kbits per second (kbits/s).  === Availability ===  Under Mac OS X the same bitrate is set to all outputs. Under Microsoft Windows every output can be set to another bitrate.", 
            "title": "SetAudioBitrate"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getaudiobitrate", 
            "text": "=== Declaration ===  GetAudioBitrate(int source)  === Parameters ===  | index:int   | index of output to get the bitrate for multiple encoders. |                                                        \n|               |  \u2014Get different outputs is only available on Microsoft Windows. On Mac OS X there is only one source available.   |  === Return Value ===  Audio bitrate as integer value.  === Description ===  Get the current audio bitrate.", 
            "title": "GetAudioBitrate"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setaudiosamplerate", 
            "text": "Declaration  SetAudioSamplerate(samplerate:int):int  Parameters  | samplerate:int | Samplerate of audio as integer value |  Return Value  - 1  if call failed  Description  Set the samplerate of the audio in Hertz (Hz).  Availability  Under Windows and Mac OSX.", 
            "title": "SetAudioSamplerate"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getaudiolevel", 
            "text": "Declaration  GetAudioLevel(channel:int):int  Parameters  | channel:int | channel id as integer. |  Return Value  Audiolevel as integer value.  Description  Get the audio level of a channel.  Availability  Under Windows and Mac OSX.", 
            "title": "GetAudioLevel"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setaudiovolume", 
            "text": "Declaration  SetAudioVolume(volume:int):int  Parameters  | volume:int | volume as integer value |  Return Value  -1  if call failed  Description  Set audio volume.  Availability  Under Windows and Mac OSX.", 
            "title": "SetAudioVolume"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setaudiopreviewvolume", 
            "text": "Declaration  SetAudioPreviewVolume(volume:int):int  Parameters  | volume:int | volume as integer value |  Return Value  -1  if call failed  Description  Set audio volume of preview.  Availability  Under Windows and Mac OSX.", 
            "title": "SetAudioPreviewVolume"
        }, 
        {
            "location": "/nanostream-macos-sdk/#color-management", 
            "text": "", 
            "title": "Color Management"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setcolorspace", 
            "text": "Declaration  SetColorSpace(index:int, mixSource:int):int  Parameters  | index:int     | index of the input source. |\n| mixSource:int | set  0  to to set only the first mixed source.  1  to set a second mixed source |\n|       |  \u2014second mixed source is only available on Microsoft Windows  |  Return Value  - 1  if call failed  Description  Set the color space of an input source. Only the firtst source is supported under Mac OS X  Availability  Under Windows and Mac OSX.", 
            "title": "SetColorSpace"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getnumberofcolorspaces", 
            "text": "Declaration  GetNumberOfColorspaces(width:int, height:int, mixSource:int):int  Parameters  | width:int     | width of the video source  |\n| height:int    | height of the video source  |\n| mixSource:int | set  0  to to get the first mixed source.  1  to get the second mixed source |\n|  |  \u2014second mixed source is only available on Microsoft Windows  |  Return Value  Count of color spaces as integer value.  Description  Get the count of color spaces. Get the color space for the specified with and height.  Availability  Under Windows and Mac OSX. Under Mac OSX mix source is not supported.", 
            "title": "GetNumberOfColorspaces"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getcolorspace", 
            "text": "Declaration  GetColorspace(index:int, mixSource:int):String  Parameters  | index:int     | Index of the color spaces. The index of the color spaces, from  0 - GetNumberOfColorspaces -1  |\n| mixSource:int | set  0  to to get the first mixed source.  1  to get the second mixed source |            \n|   |  \u2014second mixed source is only available on Microsoft Windows  |  Return Value  color space name as String  Description  Get color space name as string. First call  GetNumberOfColorspaces.  Availability  Under Windows and Mac OSX. Under Mac OSX only the first mix source is supported.", 
            "title": "GetColorspace"
        }, 
        {
            "location": "/nanostream-macos-sdk/#resolution-frame-rate", 
            "text": "", 
            "title": "Resolution &amp; Frame rate"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getnumberofresolutions", 
            "text": "Declaration  GetNumberOfResolutions(mixSource:int):int  Parameters  | mixSource:int | set  0  to to get the first mixed source.  1  to get the second mixed source |\n|                 |  \u2014second mixed source is only available on Microsoft Windows  |  Return Value  Count of resolutions as integer value.  Description  Get count of resolutions.  Availability  Under Windows and Mac OSX. Under Mac OSX only the first mix source is supported.", 
            "title": "GetNumberOfResolutions"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getresolution", 
            "text": "Declaration  GetResolution(index:int, mixSource:int):Object  Parameters  | index:int     | Index of the resolutions. The index of the resolutions, from  0 - GetNumberOfResolutions -1  |\n| mixSource:int | set  0  to to get the first mixed source.  1  to get the second mixed source  |            \n|                    |  \u2014second mixed source is only available on Microsoft Windows  |  Return Value  Get resolution of video source. First call  GetNumberOfResolutions.  Description  Get count of resolutions.  Availability  Under Windows and Mac OSX. Under Mac OSX only the first mix source is supported.", 
            "title": "GetResolution"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getnumberofframerates", 
            "text": "Declaration  GetNumberOfFramerates(width:int, height:int, colorspace:String, mixSource:int):int  Parameters  | width:int         | width of the video source  |\n| height:int        | height of the video source.                                                      |\n| colorspace:String | name of the color space get from GetColorspace                                   |\n| mixSource:int     | set  0  to to get the first mixed source.  1  to get the second mixed source |\n|        |  \u2014second mixed source is only available on Microsoft Windows  |  Return Value  Count of available frame rates as integer value.  Description  Get count of available frame rates.  Availability  Under Windows and Mac OSX. Under Mac OSX only the first mix source is supported.", 
            "title": "GetNumberOfFramerates"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getframerate", 
            "text": "Declaration  GetFramerate(index:int, mixSource:int):Number  Parameters  | index:int     | Index of the frame rate. The index of the frame rate, from  0 - GetNumberOfFramerates -1  |\n| mixSource:int | set  0  to to get the first mixed source.  1  to get the second mixed source  |         \n|     |  \u2014second mixed source is only available on Microsoft Windows  |  Return Value  Frame rate (FPS) as number value.  Description  Get the frame rate of a video source. Call  GetNumberOfFramerates  first.  Availability  Under Windows and Mac OSX. Under Mac OSX only the first mix source is supported.", 
            "title": "GetFramerate"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setdeinterlacing", 
            "text": "Declaration  SetDeinterlacing(mode:int, method:int):int  Parameters  | mode:int   | possible values:  0 =off,  1 =auto,  2 =on   \\  no auto mode for mac |\n| method:int | possible values:  0 =duplicate field/bob,  1 =blend,  2 =vertical filter,  3 =edge, 4=median,  5 =median2 |  Return Value  -1  if call failed  Description  Set deinterlacing mode and method.  Availability  Under Windows and Mac OSX.", 
            "title": "SetDeinterlacing"
        }, 
        {
            "location": "/nanostream-macos-sdk/#outputs", 
            "text": "", 
            "title": "Outputs"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getnumberofoutputs", 
            "text": "Declaration  GetNumberOfOutputs():int  Return Value  Count of outputs as integer value.  Description  Get count of outputs.  Availability  Only Supported under Microsoft Windows.", 
            "title": "GetNumberOfOutputs"
        }, 
        {
            "location": "/nanostream-macos-sdk/#addoutput", 
            "text": "Declaration  AddOutput(url:String):int  Parameters  | url:String | Url of outputs can be a local mp4 recording or a rtmp source. |  Return Value  -1  if call failed  Description  Add new output source with url.  Availability  Only Supported under Microsoft Windows.", 
            "title": "AddOutput"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setoutputurl", 
            "text": "Declaration  SetOutputUrl(url:String, index:int):int  Parameters  | url:String | Url of outputs can be a local mp4 recording or a rtmp server. |\n| index:int  | Index of the output.                                          |  Return Value  -1  if call failed  Description  Set output with url. A local mp4 recording or a rtmp server.  Availability  Under Windows and Mac OSX.", 
            "title": "SetOutputUrl"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getoutputurl", 
            "text": "", 
            "title": "GetOutputUrl"
        }, 
        {
            "location": "/nanostream-macos-sdk/#getnumberofoutputurls", 
            "text": "", 
            "title": "GetNumberOfOutputUrls"
        }, 
        {
            "location": "/nanostream-macos-sdk/#acceptdatainsamplebuffer", 
            "text": "", 
            "title": "AcceptDataInSampleBuffer"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setfilesourcefilename", 
            "text": "Declaration  SetFilesourceFilename(url:String):int  Parameters  | url:String | Url to the local file |  Return Value  -1  if call failed  Description  Set the filename of a local source.  Availability  Only Supported under Microsoft Windows.", 
            "title": "SetFilesourceFilename"
        }, 
        {
            "location": "/nanostream-macos-sdk/#clearoutputs", 
            "text": "Declaration  ClearOutputs():int  Return Value  -1  if call failed  Description  Reset all outputs except the first one.  Availability  Only Supported under Microsoft Windows.", 
            "title": "ClearOutputs"
        }, 
        {
            "location": "/nanostream-macos-sdk/#video-special", 
            "text": "", 
            "title": "Video Special"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setvideoeffect", 
            "text": "Declaration  SetVideoEffect(mode:int):int  Parameters  | mode:int | Mode of video effect. See possible overlay effects on page 33 |  Return Value  -1  if call failed  Description  Add a video effect. For overlay.  Availability  Only Supported under Microsoft Windows.", 
            "title": "SetVideoEffect"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setoverlay", 
            "text": "Declaration  SetOverlay(url:String):int  Parameters  | url:String | Url of the overlay source. Can be a locale path or server url to a png or txt file. Also can be a txt string. |  Return Value  -1  if call failed  Description  Add a overlay to the video.  Availability  Only Supported under Microsoft Windows.", 
            "title": "SetOverlay"
        }, 
        {
            "location": "/nanostream-macos-sdk/#showpropertypage", 
            "text": "Declaration  ShowPropertyPage(value:int):int  Parameters  | value:int |  1  or  0  are possible values |  Return Value  -1  if call failed  Description  Show property page. Only used for Blackmagic devices.  Availability  Only supported under Microsoft Windows.", 
            "title": "ShowPropertyPage"
        }, 
        {
            "location": "/nanostream-macos-sdk/#logging", 
            "text": "", 
            "title": "Logging"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setlog", 
            "text": "Declaration  SetLog(logFile:String, logLevel:int):int  Parameters     logFile:String  local path for logfile as string.      Return Value  -1  if call failed  Description  Set log file path and log level.  Availability  Under Windows and Mac OSX.  Availability  Under Windows and Mac OSX.", 
            "title": "SetLog"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setxmlprofile", 
            "text": "", 
            "title": "SetXmlProfile"
        }, 
        {
            "location": "/nanostream-macos-sdk/#dispose", 
            "text": "Declaration  dispose():void  Description  Destructor.  Availability  Under Windows and Mac OSX.", 
            "title": "dispose"
        }, 
        {
            "location": "/nanostream-macos-sdk/#setconfig-properties", 
            "text": "|  Property name                |  Description                                                                                                               |  Values                                                                                                                                                |  Mac Platform Support  | \n| license                                 | License string                                                                                                              |                                                                                                                                                                |                  \u2714                          |\n| XMLPath                              | Path to the XML file with configuration information                                                      |                                                                                                                                                                |                  \u2714                          |\n| RemoteControlPort              | Port number                                                                                                                 |                                                                                                                                                                |                  \u2714                          |\n| LiveSource                           |                                                                                                                                     |                                                                                                                                                               |                  \u2714                          |\n| RemoteIP                             |                                                                                                                                     |                                                                                                                                                               |                  \u2714                          |\n| AVOffsetMs              |                                                           |                                                                                                                                                                                                                                                     |                  \u2714                          |\n| ReconnectPeriod/ReconnectInterval              |                                                           |                                                                                                                                                                                                               |                  \u2714                          |\n| ReconnectAttempts              | Auto Reconnect No. of Attempts  | 5                                                                                                                                                                                                                                           |                  \u2714                          | \n| UseInternalReconnect              | Use RTMP Internal Reconnect of the RTMP Filter (do not stop encoder on network errors)  | 0 / 1                                                                                                                                          |                  \u2714                          |\n| UseUnlimitedReconnect              | Don't stop reconnecting after a specific number of failed attempts (encoder is not stopped)  | 0 / 1                                                                                                                                   |                  \u2714                          |\n| Auth              |  Authentication for RTMP and RTSP Push streaming                                                         | \u201cuser:password\u201d                                                                                                                                                      |                  \u2714                          | \n| RtmpUrlDelimiter              | Set delimiter for RTMP-url and streamname.                                                          | Example: \u201d+\u201c will split   so that \u201cmyStream\u201d is the stream name.                   |                  \u2714                          | \n| DeinterlacingMode              | Deinterlacing Mode                                                          | 0=off, 1=auto (default), 2=on Note: for some capture devices you need to set this to \u201eon\u201c (2). (Resolutions 480i, 576i, 1080i)             |                  \u2714                          |\n| DeinterlacingMethod              | Deinterlacing Method                                                           | 0=duplicate field/bob, 1=blend, 2=vertical filter, 3=edge, 4=median, 5=median2                                                                          |                  \u2714                          |\n| RemoteSendAudioLevelInterval              |                                                           |                                                                                                                                                                                                                        |                  \u2714                          |\n| CaptureRegion              | Capture Region of the input source, example for a input resolution of 640\u00d7480: SetConfig(\u201cCaptureRegion\u201d, \u201c10,630,10,470\u201d) - discards 10 pixels on each side | left,right,top,bottom                    |                  \u2714                          |\n| RTMPPublishMode              | RTMP Publish/Live/Record on Server (VOD)                                                          | 1=record, 2=append, 0=live (default)                                                                                                             |                  \u2714                          | \n| VideoAudioInput              |                                                           |                                                                                                                                                                                                                                             |                  \u2714                          | \n| PreviewNoInvert              |                                                           |                                                                                                                                                                                                                                             |                  \u2714                          |\n| ScreenCapMode              | Screen Capture Desktop Mode                                                          | 0=Screen, 1=FollowMouse, 2=Region relative, 3=Region absolute, 4=Window, 5=Window overlapping                               |                  \u2714                          | \n| ScreenCapWindowIndex              |                                                           |                                                                                                                                                                                                                                   |                  \u2714                          | \n| ApplyDynamicSettings              |                                                           |                                                                                                                                                                                                                                       |                  \u2714                          | \n| Mp4RecordOnTheFlyChangeName |                                                                                                     |                                                                                                                                                                                        |        \u2714          | \n| Mp4RecordOnTheFlyControl    | If Mp4RecordOnTheFly is enabled, controls start/stop recording        | 0=stop, 1=start                                                                                                                                                               |        \u2714          | \n| AudioPreview                | Enables audio preview during preview or broadcast                                       | 0=no preview, 1=visual preview (default, requires filter AudioVolume), 2=visual and audible preview, 3=audible preview  |       \u2714          | \n| Mp4RecordOnTheFly           | Enables start/stop recording to local file while the broadcast is running  | 0=off (default), 1=on                                                                                                                                                        |      \u2714           | \n| H264Quality                 | H.264 Encoder Quality/Speed Ratio                                                                 | 0=worst/fastest 1=default 6=highest/slowest                                                                                                                 |      \u2714           | \n| H264IFrameDistance              | H.264 I Frame / GOP Length in Frames (100 Frames = 4 seconds for 25 fps)   | 100=default, 1 = I-Frame-Only                                                                                                                              |                  \u2714                          |\n| H264PFrameDistance             | H.264 P/B Frame Distance                                                                   | 3 1 = IP-Only (no B-Frames)                                                                                                                                             |                  \u2714                          | \n| H264Profile              | H.264 Encoding Profile                                                          | Baseline, Main, Extended, High Most compatible but lowest quality is Baseline, (no B-Frames, no CABAC VLC)                                           |                  \u2714                          | \n| H264Level              | H.264 Level                                                           | 10=1.0, 11=1.1, 12=1.2, 13=1.3, 20=2.0, 21=2.1, 22=2.2, 30=3.0, 31=3.1, 32=3.2, 40=4.0, 41=4.1, 42=4.2, 50=5.0, 51=5.1                                         |                  \u2714                          |\n| H264VlcMode              | H.264 VLC Mode (CAVLC/CABAC)                                                          | =CAVLC, 2=CABAC (not allowed in H.264 Baseline Profile)                                                                                                     |                  \u2714                          |\n| OutputFrameRate             | Video Output (Encoded) Frame Rate                                                           | 5,10,15,20,25,30, OR 23980 OR 29970                                                                                                                          |       \u2714          | \n| RTMPWriteTimecode           | Send timecodes in RTMP streams, If enabled RTMP timecodes are sent in addition to the always sent RTMP packet timestamps | 0=off (default), 1=on                                                                 |      \u2714           |\n| UseSystemTimeAsTimecode              | Send RTMP/MP4 timecodes as UTC system date time or stream time                                                          | 0=stream time (default), 1=UTC system date time                                       |                  \u2714                          | \n| TimecodeInterval            | RTMP/MP4 timecode interval in milliseconds                                                | Should be higher or equal to 1000 (1s)                                                                                                                          |        \u2714         |\n| TcpConnectTimeout              |                                                           |                                                                                                                                                                                                                                             |                  \u2714                          | \n| RTSPSinkMode              | Determines if the RTSPSink is running as a server (passive/pull) or as a streamer to a RTSP push capable server (active/push) | 1=server/pull (default), 2=streamer/push                                            |                  \u2714                          | \n| RTSPSDPFileFolder              |                                                           |                                                                                                                                                                                                                                             |                  \u2714                          | \n| RTSPStreamDescription              |                                                           |                                                                                                                                                                                                                                             |                  \u2714                          |\n| AudioVolumePerSoftware              | Control volume with the Audio Volume Filter                                                          | 0=off (default), 1=on                                                                                                                                                                                                                                             |                  \u2714                          | \n| AVFShowBlackmagicDevices    | use AVFoundation for BlackMagic devices                                                                                                                                 | 0=off (default), 1=on                                                                 |       \u2714          |\n| OverlayRect                 | Sets the dimensions for a given overlay-image.  | \u201cindex,left,top,right,bottom\u201d. index: the overlay-index, beginning with 0. left, top, right and bottom define a rectangle in screen-coordinates.           |        \u2714         |\n| OverlayAlpha                | Sets the alpha-value for overlays.   | Range: 0-1. 0.0 (not visable), 1 (fully visable).                                                                                                                                                                                 |       \u2714          |\n| OverlayTextColor            | Text Overlay Color | Must be a hexadecimal color-value in BGR-format, e.g.: \u201c0000FF\u201d (255 (0x0000FF) - red)                                                                                                                                     |       \u2714          | \n| OverlayBackgroundColor      |                         | Must be a hexadecimal color-value in BGR-format, e.g.: \u201c000000\u201d (0 (0x000000) - black).                                                                                                                                   |       \u2714          | \n| OverlaySkipColor            | Setting skipcolor to a specific value will result in this color to be rendered transparent in the overlays.              | Example: If OverlayBackgroundColor was set to blue (\u201cFF0000\u201d) setting OverlaySkipColor to blue as well will result in a transparent background. Parameter must be a hexadecimal color-value in BGR-format, e.g.: \u201cFF0000\u201d (blue). Disable: Setting OverlaySkipColor to \u201cFF000000\u201d (ABGR) will disable the usage of skipcolor.                                                                                                                                                 |       \u2714          | \n| AudioDelay                  | Streaming Audio Delay / Offset (ms) |                                                                                                                                                                                                                                                      |        \u2714         |\n| ShowPropertyPageForDevice   | Calls the propertypage for a given device.                                                                               | 0 for device with index: 0                                                                                                         |         \u2714        |\n| UseQuicktimeH264Encoder              |                                                           |                                                                                                                                                                                                                               |                  \u2714                          | \n| RotateDegrees              | set the degrees by which video should be rotated, only works if UseRotation is set to on, set before StartPreview or StartBroadcast | 0/90/180/270                                                                           |                  \u2714                          |", 
            "title": "SetConfig Properties"
        }, 
        {
            "location": "/nanostream-macos-sdk/#mixmode", 
            "text": "NO_MIXING = 0 (if video mixing is not used)  LEFT_RIGHT_FULL = 1  LEFT_RIGHT_HALF = 2  TOP_BOTTOM = 3  INTERLACED_LINES = 4  INTERLACED_COLUMN = 5  ANAGLYPH = 6  PIC_IN_PIC_LEFT_TOP = 7  PIC_IN_PIC_RIGHT_TOP = 8  PIC_IN_PIC_LEFT_BOTTOM = 9  PIC_IN_PIC_RIGHT_BOTTOM = 10  VIDEO1_ONLY = 11  VIDEO2_ONLY = 12  REGION = 13  MAX = 14", 
            "title": "Mixmode"
        }, 
        {
            "location": "/nanostream-macos-sdk/#overlay-effects", 
            "text": "Overlay off = 0  Left Top = 1  Right Top = 2  Left Bottom = 3  Right bottom = 4  Free Postion = 5", 
            "title": "Overlay Effects"
        }
    ]
}